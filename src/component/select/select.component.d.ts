import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs/Rx';
import { IItemBase, IItemTree, ItemListBase, ItemListService, IViewPort, ViewportMode, ViewPortService } from '../../common/core/item-list';
export declare class DejaSelectComponent extends ItemListBase implements ControlValueAccessor, OnDestroy, AfterViewInit {
    private elementRef;
    placeholder: string;
    query: string;
    dropdownContainerId: string;
    itemTemplateExternal: any;
    parentItemTemplateExternal: any;
    placeHolderTemplateExternal: any;
    hintTemplateExternal: any;
    delaySearchTrigger: number;
    protected onTouchedCallback: () => void;
    protected onChangeCallback: (_: any) => void;
    protected keyboardNavigation: boolean;
    private subscriptions;
    private mouseUp$sub;
    protected hintTemplateInternal: any;
    protected placeHolderTemplateInternal: any;
    protected itemTemplateInternal: any;
    protected parentItemTemplateInternal: any;
    protected selectedTemplate: any;
    protected mdSuffix: any;
    private input;
    private listContainer;
    private dropDownComponent;
    private _type;
    private selectingItemIndex;
    private dropDownQuery;
    private filterExpression;
    private dropdownVisible;
    private lastScrollPosition;
    private _selectionClearable;
    private _waiter;
    _dropdownAlignment: string;
    _ownerAlignment: string;
    private clearFilterExpression$;
    private filterListComplete$;
    private storeScrollPosition$;
    private hideDropDown$;
    private showDropDown$;
    private filter$;
    private keyboardNavigation$;
    constructor(changeDetectorRef: ChangeDetectorRef, viewPort: ViewPortService, elementRef: ElementRef);
    dropdownAlignment: string;
    minSearchlength: number;
    selectionClearable: boolean | string;
    hideSelected: any;
    currentItem: IItemBase;
    pageSize: number;
    hintLabel: string;
    viewPortRowHeight: number;
    viewportMode: ViewportMode;
    childrenField: string;
    textField: string;
    valueField: string;
    searchField: string;
    type: any;
    selectingItem: (item: IItemBase) => Promise<IItemBase> | Observable<IItemBase>;
    unselectingItem: (item: IItemBase) => Promise<IItemBase> | Observable<IItemBase>;
    readonly isReadOnly: boolean;
    readonly isAutocomplete: boolean;
    readonly selectedItems: IItemBase[];
    itemListService: ItemListService;
    waiter: boolean;
    items: IItemBase[] | Promise<IItemBase[]> | Observable<IItemBase[]>;
    models: any[] | Observable<any[]>;
    readonly depthMax: number;
    maxHeight: number;
    protected readonly listElement: HTMLElement;
    private readonly containerElement;
    private currentItemIndex;
    private readonly placeHolderTemplate;
    private readonly itemTemplate;
    private readonly hintTemplate;
    private readonly parentItemTemplate;
    private readonly inputElement;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    toggleAll$(): Observable<IItemTree>;
    toggleCollapse$(index: number, collapsed: boolean): Observable<IItemTree[]>;
    protected scroll(event: Event): void;
    protected mousedown(e: MouseEvent): void;
    protected queryChanged(event: Event): void;
    protected removeSelection(event: Event, item: IItemBase): boolean;
    protected calcViewList$(): Observable<IViewPort>;
    protected ensureItemVisible(item: IItemBase | number): void;
    private onModelChange(items?);
    private select(item, hideDropDown?);
    private toggleDropDown();
    private hideDropDown();
    private showDropDown();
    private reshowDropDown();
}
