import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs/Rx';
import { GroupingService } from '../../common/core/grouping';
import { IItemBase, ItemListService, ViewportMode } from '../../common/core/item-list';
import { SortingService } from '../../common/core/sorting';
import { IDejaDragEvent } from '../dragdrop';
import { DejaTreeListScrollEvent } from '../tree-list';
import { DejaGridRowEvent, DejaGridRowsEvent, IDejaGridColumn, IDejaGridColumnEvent, IDejaGridColumnLayoutEvent, IDejaGridColumnSizeEvent, IDejaGridGroupsEvent } from './index';
export declare class DejaGridComponent implements OnDestroy {
    private changeDetectorRef;
    private elementRef;
    placeholder: string;
    nodataholder: string;
    minSearchLength: number;
    query: string;
    maxHeight: number;
    pageSize: number;
    hintLabel: string;
    viewPortRowHeight: number;
    viewportMode: ViewportMode;
    childrenField: string;
    textField: string;
    valueField: string;
    searchField: string;
    currentRow: IItemBase;
    selectedItems: IItemBase[];
    sortingService: SortingService;
    groupingService: GroupingService;
    columnsMinWidth: number;
    rowTemplateExternal: any;
    parentRowTemplateExternal: any;
    headerTemplateExternal: any;
    columnHeaderTemplateExternal: any;
    searchPrefixTemplateExternal: any;
    searchSuffixTemplateExternal: any;
    selectingRow: (item: any) => Promise<any>;
    unselectingRow: (item: any) => Promise<any>;
    itemDragEnd: EventEmitter<IDejaDragEvent>;
    itemDragStart: EventEmitter<IDejaDragEvent>;
    selectedChange: EventEmitter<DejaGridRowEvent | DejaGridRowsEvent>;
    columnLayoutChanged: EventEmitter<IDejaGridColumnLayoutEvent>;
    columnSizeChanged: EventEmitter<IDejaGridColumnSizeEvent>;
    protected onTouchedCallback: () => void;
    protected onChangeCallback: (_: any) => void;
    private rowTemplateInternal;
    private parentRowTemplateInternal;
    private _cellTemplate;
    private _parentTitleTemplate;
    private _columnHeaderTemplate;
    private headerTemplateInternal;
    private searchPrefixTemplateInternal;
    private searchSuffixTemplateInternal;
    private header;
    private treeListComponent;
    private _rows;
    private _columns;
    private _columnLayout;
    private lastScrollLeft;
    private printColumnLayout$;
    private disableUserSelection$;
    private noHorizontalScroll;
    private _itemListService;
    private sizingLayoutInfos;
    private columnsLayoutInfos;
    private subscriptions;
    private hasPercentageColumns;
    private _sortable;
    private _searchArea;
    private _groupArea;
    private _expandButton;
    private _rowsDraggable;
    private _rowsSortable;
    private _columnsDraggable;
    private _columnsSortable;
    private _columnsSizable;
    private _multiSelect;
    sortable: boolean | string;
    searchArea: boolean | string;
    groupArea: boolean | string;
    expandButton: boolean | string;
    rowsDraggable: boolean | string;
    rowsSortable: boolean | string;
    columnsDraggable: boolean | string;
    columnsSortable: boolean | string;
    columnsSizable: boolean | string;
    multiSelect: boolean | string;
    columns: IDejaGridColumn[];
    rows: IItemBase[] | Promise<IItemBase[]> | Observable<IItemBase[]>;
    currentColumn: IDejaGridColumn;
    itemListService: ItemListService;
    readonly depthMax: number;
    private readonly searchPrefixTemplate;
    private readonly searchSuffixTemplate;
    private readonly rowTemplate;
    private readonly parentRowTemplate;
    private readonly cellTemplate;
    private readonly parentTitleTemplate;
    private readonly columnsHeaderTemplate;
    private readonly columnHeaderTemplate;
    private readonly columnLayout;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef);
    ngOnDestroy(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    refresh(): void;
    clearRowsHeight(): void;
    clearViewPort(): void;
    ensureColumnVisible(column: IDejaGridColumn): void;
    protected scroll(event: DejaTreeListScrollEvent): void;
    protected onColumnHeaderClicked(event: IDejaGridColumnEvent): void;
    protected onColumnLayoutChanged(e: IDejaGridColumnLayoutEvent): void;
    protected onColumnSizeChanged(e: IDejaGridColumnSizeEvent): void;
    protected onGroupRemoved(e: IDejaGridGroupsEvent): void;
    protected onGroupsChanged(e: IDejaGridGroupsEvent): void;
    protected calcColumnsLayout(rows?: IItemBase[]): void;
    private ensureSizingVisible(column);
    private clearColumnLayout();
    private getColumnElementFromHTMLElement(element);
    private getColumnFromHTMLElement(element);
}
