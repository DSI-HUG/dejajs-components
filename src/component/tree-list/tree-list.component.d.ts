import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs/Rx';
import { GroupingService } from '../../common/core/grouping';
import { IItemBase, ItemListBase, ItemListService, IViewListResult, ViewportMode } from '../../common/core/item-list';
import { SortingService } from '../../common/core/sorting';
import { IDejaDragEvent } from '../dragdrop';
import { DejaTreeListItemEvent, DejaTreeListItemsEvent, DejaTreeListScrollEvent } from './index';
export declare class DejaTreeListComponent extends ItemListBase implements OnDestroy {
    private changeDetectorRef;
    elementRef: ElementRef;
    placeholder: string;
    nodataholder: string;
    minlength: number;
    query: string;
    maxHeight: number;
    itemTemplateExternal: any;
    parentItemTemplateExternal: any;
    loaderTemplateExternal: any;
    headerTemplateExternal: any;
    searchPrefixTemplateExternal: any;
    searchSuffixTemplateExternal: any;
    itemDragEnd: EventEmitter<IDejaDragEvent>;
    itemDragStart: EventEmitter<IDejaDragEvent>;
    scroll: EventEmitter<DejaTreeListScrollEvent>;
    selectedChange: EventEmitter<DejaTreeListItemsEvent | DejaTreeListItemEvent>;
    afterViewInit: EventEmitter<{}>;
    listcontainer: ElementRef;
    protected onTouchedCallback: () => void;
    protected onChangeCallback: (_: any) => void;
    private listItemElements;
    private itemTemplateInternal;
    private parentItemTemplateInternal;
    private loaderTemplateInternal;
    private headerTemplateInternal;
    private searchPrefixTemplateInternal;
    private searchSuffixTemplateInternal;
    private clickedItem;
    private rangeStartIndex;
    private _keyboardNavigation;
    private keyboardNavigationPos;
    private ignoreNextScrollEvents;
    private filterExpression;
    private lastScrollTop;
    private _searchArea;
    private _expandButton;
    private _sortable;
    private _itemsDraggable;
    private hasCustomService;
    private subscriptions;
    private mouseMoveObs;
    private mouseUpObs;
    private clearFilterExpression$;
    private filterListComplete$;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef);
    searchArea: boolean;
    expandButton: boolean;
    sortable: boolean;
    itemsDraggable: boolean;
    pageSize: number;
    hintLabel: string;
    viewPortRowHeight: number;
    viewportMode: ViewportMode;
    childrenField: string;
    textField: string;
    valueField: string;
    searchField: string;
    currentItem: IItemBase;
    readonly depthMax: number;
    multiSelect: boolean;
    selectedItems: IItemBase[];
    selectedItem: IItemBase;
    itemListService: ItemListService;
    sortingService: SortingService;
    groupingService: GroupingService;
    items: IItemBase[] | Promise<IItemBase[]> | Observable<IItemBase[]>;
    selectingItem: (item: any) => Promise<any>;
    unselectingItem: (item: any) => Promise<any>;
    models: any[] | Observable<any[]>;
    private readonly itemTemplate;
    private readonly parentItemTemplate;
    private readonly loaderTemplate;
    private readonly headerTemplate;
    private readonly searchPrefixTemplate;
    private readonly searchSuffixTemplate;
    writeValue(items: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    toggleAll(): Promise<void>;
    ensureItemVisible(item: IItemBase | number): void;
    protected filter(event: KeyboardEvent): boolean;
    protected ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected mousedown(e: MouseEvent): boolean;
    protected getDragContext(index: number): {
        dragendcallback: (event: IDejaDragEvent) => void;
        dragstartcallback: (event: IDejaDragEvent) => void;
        object: {
            index: number;
        };
    };
    protected getDropContext(): {
        dragovercallback: (event: IDejaDragEvent) => void;
        dropcallback: (event: IDejaDragEvent) => void;
    };
    protected dragLeave(event: DragEvent): void;
    protected onSelectionChange(): void;
    protected selectRange(indexFrom: number, indexTo?: number): Promise<number>;
    protected toggleSelect(items: IItemBase[], state: boolean): Promise<IItemBase[]>;
    protected calcViewPort(): Promise<IViewListResult>;
    private keyboardNavigation;
    private mouseUp;
}
