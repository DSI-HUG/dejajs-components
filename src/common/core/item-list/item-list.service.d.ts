import { BehaviorSubject, Observable } from 'rxjs/Rx';
import { GroupingService, IGroupInfo } from '../grouping/index';
import { ISortInfos, SortingService } from '../sorting/index';
import { IItemBase, IItemTree } from './index';
export declare class ItemListService {
    private _waiter$;
    private _items;
    private _cache;
    private selectedList;
    private _hideSelected;
    private lastQuery;
    private _sortingService;
    private _groupInfos;
    private _groupingService;
    private _ddList;
    private _ddCurrentIndex;
    private _ddChildCount;
    private _childrenField;
    private selectingItem;
    private unselectingItem;
    private _valueField;
    readonly waiter$: BehaviorSubject<boolean>;
    childrenField: string;
    hideSelected: boolean;
    valueField: string;
    readonly hasCache: boolean;
    private items;
    setItems$(items: any[] | Promise<any[]> | Observable<any[]>): Observable<IItemBase[]>;
    setModels$(items: any[] | Promise<any[]> | Observable<any[]>): Observable<IItemBase[]>;
    readonly groupInfos: IGroupInfo[];
    getItems(): IItemBase[];
    getItemFromIndex(index: number): IItemBase;
    getItemIndex(item: IItemBase): number;
    getSortingService(): SortingService;
    setSortingService(value: SortingService): void;
    getGroupingService(): GroupingService;
    setGroupingService(value: GroupingService): void;
    getTextValue(value: any, textField?: string): any;
    drop$(): Observable<boolean>;
    calcDragTargetIndex$(index: number, targetIndex: number): Observable<number>;
    toggleAll$(collapsed: boolean): Observable<IItemBase[]>;
    toggleCollapse$(index: number, collapse?: boolean): Observable<IItemBase[]>;
    expandItems$(items: IItemBase[]): Observable<IItemBase[]>;
    collapseItems$(items: IItemBase[]): Observable<IItemBase[]>;
    expandItem$(item: IItemTree): Observable<IItemTree>;
    collapseItem$(item: IItemTree): Observable<IItemTree>;
    getSelectedItems(): IItemBase[];
    setSelectedItems(items: IItemBase[], multiSelect?: boolean): void;
    unselectAll$(): Observable<IItemBase[]>;
    selectRange$(indexFrom: number, indexTo?: number): Observable<number>;
    toggleSelect$(items: IItemBase[], selected: boolean): Observable<IItemBase[]>;
    selectItems$(items: IItemBase[]): Observable<IItemBase[]>;
    unSelectItems$(items: IItemBase[]): Observable<IItemBase[]>;
    setSelectingItem(fn: (item: any) => Promise<any> | Observable<any>): void;
    selectItem$(item: IItemBase): Observable<any>;
    setUnselectingItem(fn: (item: any) => Promise<any> | Observable<any>): void;
    unSelectItem$(item: IItemBase): Observable<any>;
    findNextMatch$(compare?: (item: IItemBase, index: number) => boolean, startIndex?: number): Observable<IFindItemResult>;
    sort$(sortInfos: ISortInfos): any;
    group$(groupInfos: IGroupInfo[]): Observable<IGroupInfo[]>;
    ungroup$(groupInfo: IGroupInfo): Observable<IGroupInfo>;
    getParentListInfos$(item: IItemTree, multiSelect: boolean): Observable<IParentListInfoResult>;
    invalidateCache(): void;
    invalidateRowsHeightCache(): void;
    getViewList$(searchField: string, query?: RegExp | string, ignoreCache?: boolean, ddStartIndex?: number, ddTargetIndex?: number, multiSelect?: boolean): Observable<IViewListResult>;
    protected getItemList$(_query?: RegExp | string, _selectedItems?: IItemBase[]): Observable<IItemBase[]>;
    protected itemMatch(item: IItemBase, searchField: string, regExp: RegExp): boolean;
    protected getGroupedList$(items: IItemBase[]): Observable<IItemTree[]>;
    protected getVisibleList$(items: IItemBase[], searchField: string, regExp: RegExp, expandTree: boolean, multiSelect: boolean): Observable<IItemBase[]>;
    protected getFlatList$(items: IItemBase[], isFiltered: boolean, multiSelect: boolean): Observable<IItemBase[]>;
    protected invalidateViewCache(): void;
    private compareItems;
    private ensureSelectedItems(items, multiSelect?);
    private ensureVisibleListCache$(searchField, regExp, expandTree, multiSelect);
    private ensureFlatListCache$(isFiltered, multiSelect);
    private ensureGroupedListCache$();
    private ensureChildrenProperties(items);
}
export interface IViewListResult {
    depthMax?: number;
    visibleList?: IItemBase[];
}
export interface IFindItemResult {
    item: IItemBase;
    index: number;
}
export interface IParentListInfoResult {
    parent?: IItemTree;
    index: number;
}
