import { ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { Observable } from 'rxjs/Rx';
import { GroupingService, IGroupInfo } from '../grouping/index';
import { ISortInfos, SortingService } from '../sorting/index';
import { IItemBase } from './item-base';
import { IFindItemResult, IParentListInfoResult, ItemListService, IViewListResult } from './item-list.service';
import { IItemTree } from './item-tree';
export declare enum ViewportMode {
    NoViewport = 0,
    ConstantRowHeight = 1,
    VariableRowHeight = 2,
}
export declare class ItemListBase {
    protected changeDetectorRef: ChangeDetectorRef;
    static defaultViewPortRowHeight: number;
    protected waiter: boolean;
    protected _itemList: IItemBase[];
    protected _multiSelect: boolean;
    protected _searchField: string;
    protected _textField: string;
    protected _valueField: string;
    protected _currentItemIndex: number;
    protected _hintLabel: string;
    protected _nodataLabel: string;
    protected computedMaxHeight: number;
    protected _hideSelected: boolean;
    protected _childrenField: string;
    protected _minSearchLength: number;
    protected _viewportMode: ViewportMode;
    protected vpBeforeHeight: number;
    protected vpAfterHeight: number;
    protected vpStartRow: number;
    protected vpEndRow: number;
    protected _pageSize: number;
    protected _depthMax: number;
    protected rowsCount: number;
    protected _sortInfos: ISortInfos;
    protected _ddStartIndex: number;
    protected _ddTargetIndex: number;
    private _isBusinessObject;
    private waiter$sub;
    private _itemListService;
    private allCollapsed;
    private _viewPortRowHeight;
    constructor(changeDetectorRef: ChangeDetectorRef);
    readonly sortInfos: ISortInfos;
    readonly groupInfos: IGroupInfo[];
    setHideSelected(value: boolean): void;
    setChildrenField(value: string): void;
    getItemIndexFromHTMLElement(element: HTMLElement): number;
    getItemFromHTMLElement(element: HTMLElement): IItemBase;
    getItemListService(): ItemListService;
    getCurrentItem(): IItemBase;
    isBusinessObject(): boolean;
    getSelectedItems(): IItemBase[];
    setSelectedItems(value: IItemBase[]): void;
    setSelectingItem(fn: (item: any) => Promise<any>): void;
    setUnselectingItem(fn: (item: any) => Promise<any>): void;
    getTextValue(value: any): any;
    setViewportMode(mode: ViewportMode): void;
    sort(name?: string): void;
    sort$(name?: string): any;
    group$(groups: IGroupInfo[]): Observable<IViewListResult>;
    ungroup$(groupInfo: IGroupInfo): Observable<IViewListResult>;
    toggleAll$(): Observable<IItemBase[]>;
    toggleCollapse$(index: number, collapsed: boolean): Observable<IItemTree[]>;
    unselectAll$(): Observable<IItemBase[]>;
    refresh(): void;
    clearViewPort(): void;
    getParentListInfos$(item: IItemTree): Observable<IParentListInfoResult>;
    protected getSelectedModels(): any[];
    protected setSelectedModels(value: any[]): void;
    protected findNextMatch$(compare?: (item: IItemBase, index: number) => boolean, startIndex?: number): Observable<IFindItemResult>;
    protected setViewPortRowHeight(value: number): void;
    protected getViewPortRowHeight(): number;
    protected setItemListService(value: ItemListService): void;
    protected setSortingService(value: SortingService): void;
    protected setGroupingService(value: GroupingService): void;
    protected setHintLabel(value: string): void;
    protected setNodataLabel(value: string): void;
    protected setCurrentItem(item: IItemBase): void;
    protected getItemIndex(item: IItemBase): number;
    protected setMultiSelect(value: boolean): void;
    protected setItems$(items: IItemBase[] | Promise<IItemBase[]> | Observable<IItemBase[]>): Observable<IItemBase[]>;
    protected setModels$(models: any[] | Observable<any[]>): Observable<IItemBase[]>;
    protected getItems(): IItemBase[];
    protected drop$(): Observable<boolean>;
    protected getViewList$(query?: RegExp | string, startRow?: number, maxCount?: number, ignoreCache?: boolean): Observable<IViewListResult>;
    protected selectRange$(indexFrom: number, indexTo?: number): Observable<number>;
    protected toggleSelect$(items: IItemBase[], selected: boolean): Observable<IItemBase[]>;
    protected isCollapsible(item: IItemTree): boolean;
    protected isSelectable(item: IItemBase): boolean;
    protected setTextField(value: string): void;
    protected setValueField(value: string): void;
    protected setSearchField(value: string): void;
    protected calcDragTargetIndex$(index: number, targetIndex: number): Observable<number>;
    protected getItemTreeInfo(items: IItemBase[], item: IItemBase): IItemTreeInfo;
    protected loadViewPort(res: IViewListResult): Promise<IViewListResult>;
    protected calcViewPort(query?: string, maxHeight?: number, containerElement?: HTMLElement): void;
    protected calcViewPort$(query?: string, maxHeight?: number, containerElement?: HTMLElement): Observable<IViewListResult>;
    protected ensureItemVisible(query: string, containerElement: HTMLElement, listItemElements: QueryList<ElementRef>, item: IItemBase | number): void;
    protected convertToIItemBase(modls: any[], selected?: boolean): IItemBase[];
    private getItemHeight(item);
}
export interface IItemTreeInfo {
    item?: IItemBase;
    children?: IItemBase[];
    startIndex: number;
    lastIndex?: number;
}
