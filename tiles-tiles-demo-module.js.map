{"version":3,"sources":["webpack:///./dist/deja-js/component/fesm5/deja-js-component-tiles.js","webpack:///./src/app/tiles/tiles-demo.html","webpack:///./src/app/tiles/tiles-demo.module.ts","webpack:///./src/app/tiles/tiles-demo.routes.ts","webpack:///./src/app/tiles/tiles-demo.scss","webpack:///./src/app/tiles/tiles-demo.ts"],"names":[],"mappings":"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B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,iBAAiB,kDAAI;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C,yBAAyB,0DAAY;AACrC;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,iDAAI,yBAAyB,8DAAM;AACnD,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,mCAAmC,iBAAiB,EAAE,IAAI,6DAAK,IAAI,iEAAS;AAC5E,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,8DAAM;AAChF,4BAA4B;AAC5B;AACA,6BAA6B,oBAAoB,EAAE,IAAI,2DAAG;AAC1D,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,IAAI,6DAAK;AAC1B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,iDAAI,yBAAyB,iEAAS;AACtD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,8DAAM;AAChF,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,mCAAmC,iBAAiB,EAAE;AACtD;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,iDAAI,qBAAqB,iEAAS;AAClD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,4CAA4C,EAAE;AAChF;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,sBAAsB,iEAAS;AACnD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,6CAA6C,EAAE;AACjF;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,sBAAsB,iEAAS;AACnD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,yCAAyC,EAAE;AAC7E;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,sBAAsB,iEAAS;AACnD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,yCAAyC,EAAE;AAC7E;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,oBAAoB,iEAAS;AACjD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,2CAA2C,EAAE;AAC/E;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,sBAAsB,iEAAS;AACnD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,6CAA6C,EAAE;AACjF;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,gBAAgB,iDAAI,qBAAqB,iEAAS;AAClD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,2DAAG;AAC7E,4BAA4B;AAC5B;AACA,6BAA6B,+BAA+B,EAAE;AAC9D;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E,2BAA2B,EAAE;AAC7B,mCAAmC,iDAAI,oBAAoB,2DAAG;AAC9D,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,uDAAuD,EAAE;AAC3F;AACA,kCAAkC,iEAAS;AAC3C,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,oEAAY,QAAQ,8DAAM;AACpG,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,cAAc,EAAE,IAAI,2DAAG;AACzD,4BAA4B;AAC5B;AACA,6BAA6B,kDAAkD,EAAE;AACjF;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E;AACA,kCAAkC,iEAAS;AAC3C,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,oEAAY,KAAK,8DAAM;AACjG,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,eAAe,EAAE,IAAI,2DAAG;AAC1D,4BAA4B;AAC5B;AACA,6BAA6B,gDAAgD,EAAE;AAC/E;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E;AACA,gBAAgB,iDAAI,qBAAqB,iEAAS;AAClD,4BAA4B;AAC5B;AACA,6BAA6B,uCAAuC,EAAE,IAAI,oEAAY;AACtF;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB,qCAAqC,qEAAuB;AAC5D;AACA,oWAAoW,0CAA0C;AAC9Y,oCAAoC,cAAc,kBAAkB,qCAAqC,wBAAwB,gCAAgC,UAAU,gBAAgB,2BAA2B,cAAc,WAAW,wBAAwB,WAAW,YAAY,YAAY,yBAAyB,sBAAsB,qBAAqB,iBAAiB,gBAAgB,oBAAoB,UAAU,gBAAgB,oBAAoB,UAAU,oBAAoB,kBAAkB,gBAAgB,oBAAoB,UAAU,kCAAkC,oBAAoB,mBAAmB,UAAU,gBAAgB,sBAAsB,YAAY,WAAW,gCAAgC,aAAa,mBAAmB,uBAAuB,2BAA2B,kBAAkB,UAAU,YAAY,aAAa,uCAAuC,+BAA+B;AAC56B,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC,kCAAkC,4CAAO;AACzC,iCAAiC,4CAAO;AACxC,6BAA6B,oDAAe;AAC5C,kCAAkC,4CAAO;AACzC,kCAAkC,4CAAO;AACzC,kCAAkC,4CAAO;AACzC,6BAA6B,4CAAO;AACpC,8BAA8B,4CAAO;AACrC,gCAAgC,4CAAO;AACvC;AACA,mCAAmC,4CAAO;AAC1C,iCAAiC,4CAAO;AACxC,gCAAgC,4CAAO;AACvC,oCAAoC,4CAAO;AAC3C,iCAAiC,4CAAO;AACxC,mCAAmC,4CAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,OAAO;AAC7C,yCAAyC,EAAE,OAAO;AAClD,uCAAuC,EAAE,OAAO;AAChD,0CAA0C,EAAE,OAAO;AACnD,gDAAgD,EAAE,OAAO;AACzD;AACA,uCAAuC,EAAE;AACzC,QAAQ,iDAAI,0BAA0B,oEAAY,MAAM,iEAAS;AACjE,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE,IAAI,2DAAG;AACpD,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS,IAAI,6DAAK,MAAM,iEAAS;AACjC,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,8CAA8C,EAAE;AAChD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,+DAA+D,kDAAI;AACnE,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,oCAAoC,EAAE,wCAAwC,oBAAoB;AAClG;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,2BAA2B,EAAE;AAC9D;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,2BAA2B,EAAE;AAC1D;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,0BAA0B,iDAAI,2BAA2B,6DAAK,KAAK,2DAAG;AACtE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uBAAuB,2BAA2B,EAAE,IAAI,8DAAM;AAC9D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,eAAe,EAAE,IAAI,2DAAG;AACjD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD,QAAQ,kDAAK,uCAAuC,iEAAS;AAC7D,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB;AA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AA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA,0EAA0E,EAAE,MAAM,oBAAoB,sDAAQ,2FAA2F,kDAAI,KAAK;AAClN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa,eAAe,EAAE,OAAO;AACrC,qCAAqC,mBAAmB;AACxD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa,eAAe,EAAE,OAAO;AACrC,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa,eAAe,EAAE,OAAO;AACrC;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,0CAA0C,EAAE,2CAA2C,oBAAoB;AAC3G;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,6CAA6C,kDAAI;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,wBAAwB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,wBAAwB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,wBAAwB,EAAE;AACnD;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,gBAAgB,EAAE;AAC/C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,sCAAsC,EAAE;AACxC;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,gCAAgC,EAAE;AAC3D;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8BAA8B,kDAAI,yCAAyC,kDAAI;AAC/E,SAAS;AACT,mBAAmB,EAAE;AACrB,iDAAiD,kDAAI;AACrD,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,mDAAmD,EAAE;AACrD;AACA,4BAA4B,kDAAI;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,EAAE,6CAA6C,oBAAoB;AACnG;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uBAAuB,2BAA2B,EAAE;AACpD;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,gCAAgC,EAAE,8CAA8C,mBAAmB;AACnG;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD,4BAA4B,4CAAO;AACnC,mBAAmB,EAAE;AACrB,oDAAoD,6DAAK;AACzD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,8BAA8B,EAAE;AACjE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,qCAAqC,EAAE;AACvC,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,yCAAyC;AAChE;AACA,2BAA2B,EAAE;AAC7B,wCAAwC,kDAAI;AAC5C;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,8BAA8B,qDAAqD,EAAE;AACrF;AACA;AACA;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,mCAAmC,8MAA8M,EAAE;AACnP;AACA,aAAa;AACb;AACA;AACA;AACA,mBAAmB,kDAAI;AACvB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,oBAAoB,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,kDAAI;AACpC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,qDAAqD,EAAE;AAC7E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,0CAA0C,kDAAI;AAC9C;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2CAA2C,sDAAQ,yFAAyF,EAAE;AACvK,kCAAkC,sDAAQ;AAC1C,wCAAwC,sDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uBAAuB,0BAA0B,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,yBAAyB,sDAAQ,gCAAgC,wDAAU;AAC3E;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAI,aAAa,8DAAM;AAC/B,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,eAAe,EAAE,IAAI,2DAAG;AACjD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS,IAAI,6DAAK;AAClB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,yBAAyB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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gB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,6BAA6B,sDAAQ;AACrC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,yBAAyB,wDAAU;AACnC;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,YAAY,kDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,0BAA0B,wEAAwE,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,uDAAuD,kDAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,8EAA8E,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAK,WAAW,6DAAK;AACnD;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,6FAA6F,wDAAU;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC;AACA;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC;AACA,mBAAmB,EAAE;AACrB,0CAA0C,EAAE;AAC5C,mBAAmB,EAAE;AACrB,2CAA2C,EAAE;AAC7C,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C,mBAAmB,EAAE;AACrB,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,iDAAiD,kDAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,2DAA2D,wDAAU;AACrE;AACA;AACA,iFAAiF,wDAAU,SAAS,wDAAU,QAAQ,wDAAU;AAChI;AACA;AACA;AACA;AACA,iFAAiF,wDAAU,QAAQ,wDAAU,OAAO,wDAAU;AAC9H;AACA;AACA,qCAAqC,wDAAU;AAC/C;AACA;AACA,qCAAqC,wDAAU;AAC/C;AACA;AACA,qCAAqC,wDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,wDAAU;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,wDAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,wDAAU;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE,OAAO;AAC1C;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,QAAQ,kDAAI,wOAAwO;AACzQ;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B,EAAE;AACjC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B,EAAE;AACjC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,kDAAI;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,kDAAI;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,qCAAqC,EAAE;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,+FAA+F,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,+FAA+F,EAAE;AAClI;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE,OAAO;AAChD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,+FAA+F,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,iCAAiC,+FAA+F,EAAE;AAClI;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE,OAAO;AAChD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;A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ACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,EAAE,yCAAyC,mBAAmB;AACpG;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,EAAE,yCAAyC,mBAAmB;AACpG;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,kDAAI;AAC3B;AACA;AACA,mBAAmB,EAAE;AACrB,2CAA2C,EAAE;AAC7C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,gCAAgC,kDAAI;AACpC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,8FAA8F,EAAE;AAChG;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;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","file":"tiles-tiles-demo-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { MatIconModule, MatProgressSpinnerModule } from '@angular/material';\nimport { DejaMouseDragDropModule, DejaMouseDragDropService } from '@deja-js/component/mouse-dragdrop';\nimport { DejaEditableDirective, DejaEditableModule } from '@deja-js/component/content-editable';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { __spread } from 'tslib';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, Output, ViewChild, ViewEncapsulation, Directive, ElementRef, Injectable, Optional, ContentChild, Self, NgModule } from '@angular/core';\nimport { Color, Rect, DejaClipboardService, Directions, KeyCodes, Position, Size } from '@deja-js/core';\nimport { from, Subject, BehaviorSubject, ReplaySubject, fromEvent, merge, timer } from 'rxjs';\nimport { debounceTime, filter, takeWhile, delay, first, tap, map, reduce, take, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTileGroupComponent = /** @class */ (function () {\n    function DejaTileGroupComponent(changeDetectorRef) {\n        var _this = this;\n        this.changeDetectorRef = changeDetectorRef;\n        this.close = new EventEmitter();\n        this.titleChanged = new EventEmitter();\n        this.backgroundColor = DejaTileGroupComponent.defaultColor;\n        this.foregroundColor = null;\n        this.edit$ = new Subject();\n        this.isAlive = true;\n        this._designMode = false;\n        from(this.edit$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return _this._designMode; })), debounceTime(100))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.title.edit(true); }));\n    }\n    Object.defineProperty(DejaTileGroupComponent.prototype, \"color\", {\n        set: /**\n         * @param {?} color\n         * @return {?}\n         */\n        function (color) {\n            this.backgroundColor = color || DejaTileGroupComponent.defaultColor;\n            this.foregroundColor = Color.parse(this.backgroundColor).bestTextColor.toHex();\n            this.changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTileGroupComponent.prototype, \"designMode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._designMode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._designMode = coerceBooleanProperty(value);\n            this.changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaTileGroupComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.isAlive = false;\n    };\n    DejaTileGroupComponent.defaultColor = 'rgb(38, 50, 56)';\n    DejaTileGroupComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    selector: 'deja-tile-group',\n                    template: \"<span [deja-editable] id=\\\"title\\\" multiline=\\\"true\\\" [(ngModel)]=\\\"model.templateModel.title\\\" (ngModelChange)=\\\"titleChanged.emit($event)\\\" [mandatory]=\\\"true\\\"></span>\\n<mat-icon *ngIf=\\\"designMode\\\" id=\\\"edit-button\\\" (click)=\\\"edit$.next()\\\">edit</mat-icon>\\n<mat-icon *ngIf=\\\"designMode\\\" id=\\\"close-button\\\" (click)=\\\"close.emit($event)\\\">close</mat-icon>\\n\",\n                    styles: [\"deja-tile-group{display:flex;justify-content:space-between;align-items:center;box-sizing:border-box;padding:0 .5rem}deja-tile-group[selected=true]{box-shadow:inset 0 0 0 3px rgba(0,0,0,.6)}deja-tile-group #title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;flex-grow:1;flex-basis:auto;outline:0}deja-tile-group #title a{color:inherit!important}deja-tile-group #title[contenteditable=true]{cursor:text}deja-tile-group [fontIcon]{font-size:1rem;z-index:3;cursor:pointer;flex-basis:1rem;flex-grow:0;flex-shrink:0}deja-tile-group [fontIcon] path{fill:#777!important}deja-tile-group [fontIcon]:hover{background-color:rgba(255,255,255,.2);color:#222}deja-tile-group #close-button,deja-tile-group #edit-button{margin:.3rem;flex:0 0 auto}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    DejaTileGroupComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef }\n    ]; };\n    DejaTileGroupComponent.propDecorators = {\n        model: [{ type: Input }],\n        close: [{ type: Output }],\n        titleChanged: [{ type: Output }],\n        backgroundColor: [{ type: HostBinding, args: ['style.background-color',] }],\n        foregroundColor: [{ type: HostBinding, args: ['style.color',] }],\n        title: [{ type: ViewChild, args: [DejaEditableDirective,] }],\n        _designMode: [{ type: HostBinding, args: ['attr.designMode',] }],\n        color: [{ type: Input }],\n        designMode: [{ type: Input }]\n    };\n    return DejaTileGroupComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTilePositionDirective = /** @class */ (function () {\n    function DejaTilePositionDirective(el) {\n        this.element = (/** @type {?} */ (el.nativeElement));\n        this.element.style.display = 'none';\n    }\n    Object.defineProperty(DejaTilePositionDirective.prototype, \"bounds\", {\n        set: /**\n         * @param {?} rect\n         * @return {?}\n         */\n        function (rect) {\n            if (rect) {\n                var left = rect.left, top_1 = rect.top, width = rect.width, height = rect.height;\n                this.element.style.left = left + \"px\";\n                this.element.style.top = top_1 + \"px\";\n                this.element.style.width = width + \"px\";\n                this.element.style.height = height + \"px\";\n                this.element.style.display = 'block';\n            }\n            else {\n                this.element.style.display = 'none';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DejaTilePositionDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[deja-tile-position]',\n                },] }\n    ];\n    /** @nocollapse */\n    DejaTilePositionDirective.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    DejaTilePositionDirective.propDecorators = {\n        bounds: [{ type: Input }]\n    };\n    return DejaTilePositionDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTile = /** @class */ (function () {\n    function DejaTile(tile) {\n        this.tile = tile;\n        this.cutted$ = new BehaviorSubject(false);\n        this.dragging$ = new BehaviorSubject(false);\n        this.dropping$ = new BehaviorSubject(false);\n        this.pressed$ = new BehaviorSubject(false);\n        this.selected$ = new BehaviorSubject(false);\n        this.expanded$ = new BehaviorSubject(false);\n        this.hidden$ = new ReplaySubject(1);\n        this.pending$ = new BehaviorSubject(false);\n        this.deleted$ = new Subject();\n        this.pixelBounds$ = new BehaviorSubject(null);\n        this.isTemporary = false;\n        this.fading = false;\n        this.refresh$ = new Subject();\n        this._isCutted = false;\n        this._isDragging = false;\n        this._isDropping = false;\n        this._isPressed = false;\n        this._isSelected = false;\n        this._isExpanded = false;\n        this._isHidden = false;\n        this._isPending = false;\n        this._model = tile;\n        this._id = tile.id;\n        this._percentBounds = tile.bounds;\n        this._color = tile.color;\n        if (tile.effects) {\n            this.isCutted = tile.effects.cutted;\n            this.isSelected = tile.effects.selected;\n            this._isPending = tile.effects.pending;\n            this.fading = tile.effects.fading;\n        }\n        if (!this._id) {\n            this._id = \"#\" + DejaTile.currentId++;\n        }\n        // console.log(`Creating tile ${this._id}`);\n    }\n    Object.defineProperty(DejaTile.prototype, \"model\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._model;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"color\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._color;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._color = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"pixelBounds\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._pixelBounds;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (!Rect.equals(this._pixelBounds, value)) {\n                this._pixelBounds = value;\n                this.pixelBounds$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isCutted\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isCutted;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isCutted !== value) {\n                this._isCutted = value;\n                this.cutted$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isDragging\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isDragging;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isDragging !== value) {\n                this._isDragging = value;\n                this.dragging$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isDropping\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isDropping;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isDropping !== value) {\n                this._isDropping = value;\n                this.dropping$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isPressed\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isPressed;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isPressed !== value) {\n                this._isPressed = value;\n                this.pressed$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isSelected\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isSelected;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isSelected !== value) {\n                this._isSelected = value;\n                this.selected$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isExpanded\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isExpanded;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isExpanded !== value) {\n                this._isExpanded = value;\n                this.expanded$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isHidden\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isHidden;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isHidden !== value) {\n                this._isHidden = value;\n                this.hidden$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"isPending\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._isPending;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._isPending !== value) {\n                this._isPending = value;\n                this.pending$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"id\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"type\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.tile.type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"percentBounds\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._percentBounds;\n        },\n        set: /**\n         * @param {?} bounds\n         * @return {?}\n         */\n        function (bounds) {\n            this._percentBounds = bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTile.prototype, \"templateModel\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.tile.templateModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.makeId = /**\n     * @return {?}\n     */\n    function () {\n        this._id = \"#\" + DejaTile.currentId++;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.refreshBounds = /**\n     * @return {?}\n     */\n    function () {\n        this.percentBounds = this.model.bounds;\n    };\n    /**\n     * @param {?} tile\n     * @return {?}\n     */\n    DejaTile.prototype.equalsTo = /**\n     * @param {?} tile\n     * @return {?}\n     */\n    function (tile) {\n        if (this.model.id) {\n            return this.model.id === tile.id;\n        }\n        else {\n            return this.model === tile;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        return new DejaTile(this.toTileModel());\n    };\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.delete = /**\n     * @return {?}\n     */\n    function () {\n        this.deleted$.next();\n    };\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.toTileModel = /**\n     * @return {?}\n     */\n    function () {\n        return (/** @type {?} */ ({\n            id: this.id,\n            type: this.type,\n            bounds: this.percentBounds,\n            color: this._color,\n            templateModel: this.templateModel,\n            effects: {\n                pending: this.isPending || undefined,\n                cutted: this.isCutted || undefined,\n                selected: this.isSelected || undefined,\n            }\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    DejaTile.prototype.refresh = /**\n     * @return {?}\n     */\n    function () {\n        this.refresh$.next();\n    };\n    DejaTile.currentId = 0;\n    return DejaTile;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTileComponent = /** @class */ (function () {\n    function DejaTileComponent(el, changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.modelChanged = new EventEmitter();\n        this.close = new EventEmitter();\n        this.progressDiameter = 100;\n        this.isAlive = true;\n        this.element = (/** @type {?} */ (el.nativeElement));\n        this.element.setAttribute('hidden', '0');\n    }\n    Object.defineProperty(DejaTileComponent.prototype, \"tile\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._tile;\n        },\n        set: /**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            var _this = this;\n            this._tile = tile;\n            if (tile) {\n                /** @type {?} */\n                var toogleAttribute_1 = (/**\n                 * @param {?} attribute\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (attribute, value) {\n                    if (value) {\n                        _this.element.setAttribute(attribute, value.toString());\n                    }\n                    else {\n                        _this.element.removeAttribute(attribute);\n                    }\n                });\n                if (tile.fading) {\n                    this.element.setAttribute('fading', '0');\n                    this.changeDetectorRef.markForCheck();\n                }\n                from(tile.pixelBounds$).pipe(filter((/**\n                 * @param {?} bounds\n                 * @return {?}\n                 */\n                function (bounds) { return !!bounds; })), first(), takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), filter((/**\n                 * @return {?}\n                 */\n                function () { return tile.fading; })), tap((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.element.setAttribute('fading', '1');\n                    _this.changeDetectorRef.markForCheck();\n                })), delay(200))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.element.removeAttribute('fading');\n                    _this.changeDetectorRef.markForCheck();\n                }));\n                from(tile.pixelBounds$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), filter((/**\n                 * @param {?} bounds\n                 * @return {?}\n                 */\n                function (bounds) { return !!bounds; })))\n                    .subscribe((/**\n                 * @param {?} bounds\n                 * @return {?}\n                 */\n                function (bounds) {\n                    if (!tile.isHidden) {\n                        _this.element.removeAttribute('hidden');\n                    }\n                    _this.element.style.left = bounds.left + \"px\";\n                    _this.element.style.top = bounds.top + \"px\";\n                    _this.element.style.width = bounds.width + \"px\";\n                    _this.element.style.height = bounds.height + \"px\";\n                    _this.progressDiameter = Math.min(100, Math.round(Math.max(bounds.width * 0.4, bounds.height * 0.4)));\n                    _this.changeDetectorRef.markForCheck();\n                }));\n                from(tile.pressed$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('pressed', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.selected$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('selected', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.dragging$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('drag', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.dropping$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('drop', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.cutted$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('cutted', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.expanded$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('expanded', value); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                from(tile.deleted$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), tap((/**\n                 * @return {?}\n                 */\n                function () { return _this.element.remove(); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                /** @type {?} */\n                var tooogleHide$ = from(tile.hidden$).pipe(tap((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return toogleAttribute_1('hidden', value ? '1' : '2'); })));\n                // Hide\n                tooogleHide$.pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), debounceTime(1000), filter((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return value; })), tap((/**\n                 * @return {?}\n                 */\n                function () { return _this.element.setAttribute('hidden', '0'); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                // Show\n                tooogleHide$.pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), debounceTime(1), filter((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) { return !value; })), tap((/**\n                 * @return {?}\n                 */\n                function () { return _this.element.removeAttribute('hidden'); })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                // Refresh\n                from(tile.refresh$).pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive && !!_this._tile; })), debounceTime(1))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaTileComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.isAlive = false;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTileComponent.prototype.onTitleChanged = /**\n     * @return {?}\n     */\n    function () {\n        this.modelChanged.emit();\n    };\n    DejaTileComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'deja-tile',\n                    template: \"<deja-tile-group class=\\\"noselect\\\" *ngIf=\\\"tile.type==='group'\\\" [model]=\\\"tile\\\" [designMode]=\\\"designMode\\\" (titleChanged)=\\\"onTitleChanged()\\\" [color]=\\\"tile.color\\\" (close)=\\\"close.emit($event)\\\"></deja-tile-group>\\n<ng-template *ngIf=\\\"tile.type!=='group'\\\" [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{ $implicit: tile, designMode: designMode }\\\"></ng-template>\\n<mat-progress-spinner *ngIf=\\\"tile && tile.pending$ | async\\\" mode=\\\"indeterminate\\\" [diameter]=\\\"progressDiameter\\\" class=\\\"accent\\\"></mat-progress-spinner>\\n\\n\\n\",\n                    styles: [\":host{display:block;position:absolute;transition-property:left,top,opacity;transition-duration:.5s;transition-timing-function:ease;opacity:1}:host[expanded]{transition-property:height}:host[cutted]{opacity:.5}:host[drag],:host[drop]{opacity:.9;z-index:100}:host[drag]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:none}:host[fading=\\\"0\\\"]{opacity:0;transition:none}:host[fading=\\\"1\\\"]{opacity:0}:host[hidden=\\\"0\\\"]{visibility:hidden;transition:none}:host[hidden=\\\"1\\\"]{opacity:0;transition:opacity 1s ease-in-out}:host[hidden=\\\"2\\\"]{visibility:visible;opacity:0;transition:none}:host deja-tile-group{height:100%;width:100%}:host deja-tile-group .mat-icon{display:flex;align-items:center;justify-content:center}:host mat-progress-spinner{position:absolute;z-index:1;right:.2rem;bottom:.2rem;-webkit-transform:translate(-60%,-60%);transform:translate(-60%,-60%)}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    DejaTileComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef }\n    ]; };\n    DejaTileComponent.propDecorators = {\n        template: [{ type: Input }],\n        designMode: [{ type: Input }],\n        modelChanged: [{ type: Output }],\n        close: [{ type: Output }],\n        tile: [{ type: Input }]\n    };\n    return DejaTileComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTilesLayoutProvider = /** @class */ (function () {\n    function DejaTilesLayoutProvider(clipboardService) {\n        var _this = this;\n        this.clipboardService = clipboardService;\n        this.refreshTiles$ = new Subject();\n        this.ensureVisible$ = new Subject();\n        this.ensureBounds$ = new Subject();\n        this.dragging$ = new BehaviorSubject(false);\n        this.dragSelection$ = new Subject();\n        this.dragDropInfos$ = new Subject();\n        this.selectionRect$ = new Subject();\n        this.dragover$ = new Subject();\n        this.dragleave$ = new Subject();\n        this.deleteTiles$ = new Subject();\n        this.designMode = false;\n        this.layoutCompleted = new Subject();\n        this.layoutChanged = new Subject();\n        this.modelChanged = new Subject();\n        this.selectionChanged = new Subject();\n        this.contentAdding = new Subject();\n        this.contentRemoving = new Subject();\n        this._tileMinWidth = 10;\n        this._tileMinWidthUnit = '%';\n        this._tileMaxWidth = 100;\n        this._tileMaxWidthUnit = '%';\n        this._tileMinHeight = 10;\n        this._tileMinHeightUnit = '%';\n        this._tileMaxHeight = 100;\n        this._tileMaxHeightUnit = '%';\n        this._maxWidth = 100;\n        this._maxWidthUnit = '%';\n        this.tilesDic = (/** @type {?} */ ({}));\n        this._targetBounds = (/** @type {?} */ ({}));\n        this.destination = (/** @type {?} */ ({}));\n        this.dragPageOffset = (/** @type {?} */ ({}));\n        this.dragOriginalPosition = (/** @type {?} */ ({}));\n        this.isAlive = true;\n        this.selectedIds = (/** @type {?} */ ([]));\n        from(this.refreshTiles$).pipe(debounceTime(30), takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), tap((/**\n         * @return {?}\n         */\n        function () {\n            _this.container.style.width = '';\n            _this.container.style.height = '';\n        })), delay(10), takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) {\n            /** @type {?} */\n            var placeAtTheEnd = (/** @type {?} */ ([]));\n            /** @type {?} */\n            var containerBounds = _this.container.getBoundingClientRect();\n            if ((params && params.resetWidth) || !_this.hundredPercentWith) {\n                _this.hundredPercentWith = containerBounds.width;\n            }\n            /** @type {?} */\n            var height = containerBounds.height - 20;\n            /** @type {?} */\n            var width = containerBounds.width - 20;\n            /** @type {?} */\n            var maxWidth = 0;\n            /** @type {?} */\n            var maxHeight = 0;\n            /** @type {?} */\n            var tiles = _this.tiles || [];\n            /** @type {?} */\n            var selectedTileIds = (/** @type {?} */ ([]));\n            tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) {\n                if (tile.percentBounds && !tile.percentBounds.isEmpty()) {\n                    /** @type {?} */\n                    var bounds = _this.getPixelBounds(tile.percentBounds);\n                    if (bounds.bottom > maxWidth) {\n                        maxWidth = bounds.bottom;\n                    }\n                    if (bounds.right > maxHeight) {\n                        maxHeight = bounds.right;\n                    }\n                    if (!tile.isDragging) {\n                        tile.pixelBounds = bounds;\n                    }\n                }\n                else {\n                    placeAtTheEnd.push(tile);\n                }\n                if (tile.isSelected && !tile.isHidden) {\n                    selectedTileIds.push(tile.id);\n                }\n            }));\n            /** @type {?} */\n            var top = maxHeight;\n            /** @type {?} */\n            var left = 0;\n            placeAtTheEnd.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) {\n                tile.percentBounds = tile.percentBounds || new Rect(_this.getPercentSize(left), _this.getPercentSize(top), 3 * _this.getTileMinPercentWidth(), 3 * _this.getTileMinPercentHeight());\n                /** @type {?} */\n                var pixelBounds = _this.getPixelBounds(tile.percentBounds);\n                if (pixelBounds.right > width) {\n                    top = maxHeight;\n                    left = 0;\n                    tile.percentBounds.left = 0;\n                    tile.percentBounds.top = _this.getPercentSize(top);\n                    pixelBounds = _this.getPixelBounds(tile.percentBounds);\n                }\n                if (pixelBounds.bottom > maxHeight) {\n                    maxHeight = pixelBounds.bottom;\n                }\n                tile.pixelBounds = _this.getPixelBounds(tile.percentBounds);\n                left += pixelBounds.width;\n            }));\n            if (_this.dragTarget) {\n                /** @type {?} */\n                var dragBounds = _this.getPixelBounds(_this.dragTarget);\n                if (height <= dragBounds.bottom) {\n                    height = dragBounds.bottom + dragBounds.height;\n                }\n                if (width <= dragBounds.right) {\n                    width = dragBounds.right + dragBounds.width;\n                }\n            }\n            /** @type {?} */\n            var minHeight = _this.getPixelSize(2 * _this._tileMinHeight, _this._tileMinHeightUnit);\n            if (height < minHeight) {\n                height = minHeight;\n            }\n            _this.container.style.width = width + \"px\";\n            _this.container.style.height = height + \"px\";\n            if (params) {\n                if (params.ensureVisible) {\n                    _this.ensureVisible$.next(params.ensureVisible);\n                }\n                if (params.ensureBounds) {\n                    _this.ensureBounds$.next(params.ensureBounds);\n                }\n            }\n            _this.selectedTiles = selectedTileIds;\n            /** @type {?} */\n            var event = (/** @type {?} */ (new CustomEvent('DejaTilesEvent', { cancelable: false })));\n            if (placeAtTheEnd.length > 0) {\n                event.tiles = placeAtTheEnd.map((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return tile.toTileModel(); }));\n                _this.layoutChanged.next(event);\n            }\n            event.tiles = tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            _this.layoutCompleted.next(event);\n        }));\n        /** @type {?} */\n        var ensureTile$ = from(this.ensureVisible$).pipe(delay(1), map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        function (id) { return _this.tilesDic[id]; })), filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return !!tile; })), map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.percentBounds; })));\n        merge(this.ensureBounds$, ensureTile$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} percentBounds\n         * @return {?}\n         */\n        function (percentBounds) {\n            var _a = _this.getPixelBounds(percentBounds), left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;\n            /** @type {?} */\n            var findScrollContainer = (/**\n             * @param {?} container\n             * @return {?}\n             */\n            function (container) {\n                while (container && container.tagName !== 'DEJA-TILES') {\n                    container = container.parentElement;\n                }\n                return container;\n            });\n            /** @type {?} */\n            var scrollContainer = findScrollContainer(_this.container);\n            if (!scrollContainer) {\n                return;\n            }\n            /** @type {?} */\n            var containerBounds = _this.container.getBoundingClientRect();\n            /** @type {?} */\n            var scrollBounds = scrollContainer.getBoundingClientRect();\n            if (left + containerBounds.left < scrollBounds.bottom) {\n                scrollContainer.scrollLeft += left + containerBounds.left - scrollBounds.bottom;\n            }\n            else if (right + containerBounds.left > scrollBounds.right) {\n                scrollContainer.scrollLeft += right + containerBounds.left - scrollBounds.right;\n            }\n            if (top + containerBounds.top < scrollBounds.top) {\n                scrollContainer.scrollTop += top + containerBounds.top - scrollBounds.top;\n            }\n            else if (bottom + containerBounds.top > scrollBounds.bottom) {\n                scrollContainer.scrollTop += bottom + containerBounds.top - scrollBounds.bottom;\n            }\n        }));\n        from(this.dragSelection$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} dragSelection\n         * @return {?}\n         */\n        function (dragSelection) {\n            /** @type {?} */\n            var mouseUp$ = fromEvent(_this._container.ownerDocument, 'mouseup').pipe(tap((/**\n             * @return {?}\n             */\n            function () { return _this.selectionRect$.next(null); })));\n            fromEvent(_this._container, 'mousemove').pipe(takeUntil(mouseUp$), filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) { return event.buttons === 1; })))\n                .subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                /** @type {?} */\n                var containerBounds = _this._container.getBoundingClientRect();\n                // Select all tiles between start position and current position\n                dragSelection.selectedRect = Rect.fromPoints(dragSelection.startPosition, new Position(event.pageX - containerBounds.left, event.pageY - containerBounds.top));\n                _this.selectionRect$.next(dragSelection.selectedRect);\n                /** @type {?} */\n                var selection = _this.HitTest(dragSelection.selectedRect);\n                _this.selectedTiles = selection.map((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return tile.id; }));\n            }));\n        }));\n        /** @type {?} */\n        var leave$ = from(this.dragleave$);\n        from(this.dragDropInfos$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} dragDropInfos\n         * @return {?}\n         */\n        function (dragDropInfos) {\n            if (!dragDropInfos || !dragDropInfos.tiles || !dragDropInfos.tiles.length) {\n                return;\n            }\n            /** @type {?} */\n            var mousemove$ = fromEvent(_this._container, 'mousemove');\n            /** @type {?} */\n            var mouseUp$ = fromEvent(_this._container.ownerDocument, 'mouseup');\n            /** @type {?} */\n            var keyUp$ = fromEvent(_this._container.ownerDocument, 'keyup');\n            /** @type {?} */\n            var escape$ = keyUp$.pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) { return event.keyCode === KeyCodes.Escape; })));\n            /** @type {?} */\n            var cancel$ = merge(leave$, mousemove$.pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) { return event.buttons !== 1; }))), escape$);\n            /** @type {?} */\n            var kill$ = merge(mouseUp$, cancel$);\n            /** @type {?} */\n            var mouseUp$sub;\n            /** @type {?} */\n            var cancel$sub = cancel$.pipe(take(1), tap((/**\n             * @return {?}\n             */\n            function () { return mouseUp$sub.unsubscribe(); })))\n                .subscribe((/**\n             * @return {?}\n             */\n            function () {\n                _this.removeTemporaryTile();\n                _this.cancelDrag(dragDropInfos.tiles);\n            }));\n            mouseUp$sub = mouseUp$.pipe(take(1), tap((/**\n             * @return {?}\n             */\n            function () { return cancel$sub.unsubscribe(); })))\n                .subscribe((/**\n             * @return {?}\n             */\n            function () { return _this.drop(dragDropInfos.tiles); }));\n            /** @type {?} */\n            var dragover$ = from(_this.dragover$).pipe(map((/**\n             * @param {?} cursor\n             * @return {?}\n             */\n            function (cursor) { return cursor.originalEvent; })));\n            merge(mousemove$, dragover$).pipe(takeUntil(kill$))\n                .subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                /** @type {?} */\n                var containerBounds = _this._container.getBoundingClientRect();\n                /** @type {?} */\n                var x = event.pageX - containerBounds.left;\n                /** @type {?} */\n                var y = event.pageY - containerBounds.top;\n                if (!dragDropInfos.enabled) {\n                    if (Math.abs(dragDropInfos.startX - x) >= 10 || Math.abs(dragDropInfos.startY - y) >= 10) {\n                        // Allow drag and drop of new tiles from outside the component\n                        if (dragDropInfos.tiles.length === 1 && !_this.tiles.find((/**\n                         * @param {?} t\n                         * @return {?}\n                         */\n                        function (t) { return t === dragDropInfos.tiles[0]; }))) {\n                            /** @type {?} */\n                            var tempTile = dragDropInfos.tiles[0];\n                            // Clear current selection\n                            _this.selectedTiles = [tempTile.id];\n                            /** @type {?} */\n                            var bounds = tempTile.percentBounds;\n                            if (!bounds || bounds.isEmpty()) {\n                                bounds = new Rect(0, 0, 15, 15);\n                            }\n                            /** @type {?} */\n                            var idealBounds = _this.getFreePlace(new Rect(_this.getPercentSize(x) - bounds.width / 2, _this.getPercentSize(y) - bounds.height / 2, bounds.width, bounds.height));\n                            dragDropInfos.startX = idealBounds.left - bounds.width / 2;\n                            dragDropInfos.startY = idealBounds.top - bounds.height / 2;\n                            tempTile.percentBounds = idealBounds;\n                            tempTile.dragging$.next(true);\n                            _this._cursor = 'move';\n                            _this.tiles.push(tempTile);\n                            _this.tilesDic[tempTile.id] = tempTile;\n                            // Start tile drag and drop\n                            _this.dragging$.next(true);\n                            dragDropInfos.enabled = true;\n                            _this.startDrag(dragDropInfos.tiles, _this.getPixelSize(idealBounds.left + idealBounds.width / 2), _this.getPixelSize(idealBounds.top + idealBounds.height / 2));\n                        }\n                        else {\n                            // Start tile drag and drop\n                            _this.dragging$.next(true);\n                            dragDropInfos.enabled = true;\n                            _this.startDrag(dragDropInfos.tiles, x, y);\n                        }\n                    }\n                }\n                else {\n                    _this.drag(dragDropInfos.tiles, x, y);\n                }\n            }));\n        }));\n        // Delete stream for clipboard\n        from(this.deleteTiles$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} tilesToDelete\n         * @return {?}\n         */\n        function (tilesToDelete) { return _this.deleteTiles(tilesToDelete); }));\n    }\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"container\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._container;\n        },\n        set: /**\n         * @param {?} container\n         * @return {?}\n         */\n        function (container) {\n            var _this = this;\n            this._container = container;\n            if (this._container) {\n                /** @type {?} */\n                var leave$_1 = fromEvent(container, 'mouseleave');\n                /** @type {?} */\n                var mouseUp$_1 = fromEvent(container.ownerDocument, 'mouseup');\n                fromEvent(container, 'mouseenter').pipe(takeWhile((/**\n                 * @return {?}\n                 */\n                function () { return _this.isAlive; })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    // Cursor provider\n                    if (_this.designMode) {\n                        fromEvent(container, 'mousemove').pipe(debounceTime(10), takeUntil(leave$_1), filter((/**\n                         * @param {?} event\n                         * @return {?}\n                         */\n                        function (event) { return event.buttons === 0; })))\n                            .subscribe((/**\n                         * @param {?} event\n                         * @return {?}\n                         */\n                        function (event) {\n                            _this._cursor = _this.getCursorFromHTMLElement(event.pageX, event.pageY, (/** @type {?} */ (event.target)));\n                            _this.container.style.cursor = _this._cursor;\n                        }));\n                    }\n                    else {\n                        _this.container.style.cursor = '';\n                    }\n                    /** @type {?} */\n                    var mouseDown$ = fromEvent(container, 'mousedown').pipe(filter((/**\n                     * @param {?} event\n                     * @return {?}\n                     */\n                    function (event) { return event.buttons === 1; })), map((/**\n                     * @param {?} event\n                     * @return {?}\n                     */\n                    function (event) { return ({ event: event, target: (/** @type {?} */ (event.target)), clickedTile: _this.getTileComponentFromHTMLElement((/** @type {?} */ (event.target))) }); })));\n                    // Pressed and selected tile observers\n                    mouseDown$.pipe(takeUntil(leave$_1))\n                        .subscribe((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    function (_a) {\n                        var event = _a.event, target = _a.target, clickedTile = _a.clickedTile;\n                        if (_this.currentTile) {\n                            _this.currentTile.isPressed = false;\n                        }\n                        _this.currentTile = clickedTile;\n                        if (_this.currentTile) {\n                            _this.currentTile.isPressed = true;\n                            if (event.ctrlKey) ;\n                            else {\n                                if (!_this.currentTile.isSelected || _this._cursor !== 'move') {\n                                    _this.selectedTiles = [_this.currentTile.id];\n                                }\n                                if (_this.designMode) {\n                                    /** @type {?} */\n                                    var containerBounds = _this._container.getBoundingClientRect();\n                                    /** @type {?} */\n                                    var x = event.pageX - containerBounds.left;\n                                    /** @type {?} */\n                                    var y = event.pageY - containerBounds.top;\n                                    _this.dragDropInfos$.next((/** @type {?} */ ({\n                                        enabled: false,\n                                        startX: x,\n                                        startY: y,\n                                        tiles: _this.tiles.filter((/**\n                                         * @param {?} tile\n                                         * @return {?}\n                                         */\n                                        function (tile) { return tile.isSelected; })),\n                                    })));\n                                }\n                            }\n                            merge(mouseUp$_1, leave$_1).pipe(first(), filter((/**\n                             * @return {?}\n                             */\n                            function () { return !!_this.currentTile; })))\n                                .subscribe((/**\n                             * @param {?} e\n                             * @return {?}\n                             */\n                            function (e) {\n                                if (_this.currentTile.isPressed) {\n                                    _this.currentTile.isPressed = false;\n                                    // Multi-selection\n                                    if (e.ctrlKey) {\n                                        _this.currentTile.isSelected = !_this.currentTile.isSelected;\n                                        _this.selectedTiles = _this.tiles\n                                            .filter((/**\n                                         * @param {?} tile\n                                         * @return {?}\n                                         */\n                                        function (tile) { return tile.isSelected; }))\n                                            .map((/**\n                                         * @param {?} tile\n                                         * @return {?}\n                                         */\n                                        function (tile) { return tile.id; }));\n                                    }\n                                }\n                                _this.currentTile = undefined;\n                            }));\n                        }\n                        else {\n                            if (target === _this.container || target.parentElement === _this.container) {\n                                if (event.buttons === 1) {\n                                    // Start drag selection\n                                    /** @type {?} */\n                                    var containerBounds = _this._container.getBoundingClientRect();\n                                    _this.dragSelection$.next((/** @type {?} */ ({ startPosition: new Position(event.pageX - containerBounds.left, event.pageY - containerBounds.top), selectedRect: new Rect(), })));\n                                }\n                                // Unselect all tiles\n                                if (_this.currentTile) {\n                                    _this.currentTile.isPressed = false;\n                                }\n                                _this.selectedTiles = [];\n                            }\n                        }\n                    }));\n                }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"tiles\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._tiles || (this._tiles = []);\n        },\n        set: /**\n         * @param {?} tiles\n         * @return {?}\n         */\n        function (tiles) {\n            this._tiles = tiles;\n            this.tilesDic = this.tiles.reduce((/**\n             * @param {?} dic\n             * @param {?} t\n             * @return {?}\n             */\n            function (dic, t) {\n                dic[t.id] = t;\n                return dic;\n            }), (/** @type {?} */ ({})));\n            this.refreshTiles$.next({ resetWidth: true });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"selectedTiles\", {\n        set: /**\n         * @param {?} selectedIds\n         * @return {?}\n         */\n        function (selectedIds) {\n            /** @type {?} */\n            var selectedTiles = (/** @type {?} */ ([]));\n            /** @type {?} */\n            var raiseEvent = false;\n            /** @type {?} */\n            var idsDic = selectedIds.reduce((/**\n             * @param {?} dic\n             * @param {?} id\n             * @return {?}\n             */\n            function (dic, id) {\n                dic[id] = true;\n                return dic;\n            }), (/** @type {?} */ ({})));\n            /** @type {?} */\n            var previousIdsDic = this.selectedIds.reduce((/**\n             * @param {?} dic\n             * @param {?} id\n             * @return {?}\n             */\n            function (dic, id) {\n                dic[id] = true;\n                return dic;\n            }), (/** @type {?} */ ({})));\n            if (this.tiles && this.tiles.length) {\n                this.tiles.forEach((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) {\n                    if (idsDic[tile.id] !== previousIdsDic[tile.id]) {\n                        raiseEvent = true;\n                    }\n                    tile.isSelected = idsDic[tile.id];\n                    if (tile.isSelected) {\n                        selectedTiles.push(tile);\n                    }\n                }));\n            }\n            else {\n                raiseEvent = this.selectedIds.length > 0;\n            }\n            this.selectedIds = selectedIds;\n            if (raiseEvent) {\n                /** @type {?} */\n                var event_1 = (/** @type {?} */ (new CustomEvent('DejaTilesAddEvent', { cancelable: false })));\n                event_1.tiles = selectedTiles;\n                this.selectionChanged.next(event_1);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"tileMinWidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.extractValueAndUnit('_tileMinWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"tileMaxWidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.extractValueAndUnit('_tileMaxWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"tileMinHeight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.extractValueAndUnit('_tileMinHeight', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"tileMaxHeight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.extractValueAndUnit('_tileMaxHeight', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"maxWidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.extractValueAndUnit('_maxWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesLayoutProvider.prototype, \"targetBounds\", {\n        get: /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            return this._targetBounds;\n        },\n        set: /**\n         * @private\n         * @param {?} targetBounds\n         * @return {?}\n         */\n        function (targetBounds) {\n            this._targetBounds = targetBounds;\n            if (targetBounds) {\n                this.selectionRect$.next(new Rect({\n                    height: this.getPixelSize(targetBounds.height || 0),\n                    left: this.getPixelSize(targetBounds.left || 0),\n                    top: this.getPixelSize(targetBounds.top || 0),\n                    width: this.getPixelSize(targetBounds.width || 0),\n                }));\n            }\n            else {\n                this.selectionRect$.next(undefined);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.isAlive = false;\n        this._container = undefined;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.copySelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selectedTiles = this.tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.isSelected; }));\n        if (selectedTiles.length) {\n            this.copyTiles(selectedTiles, false);\n        }\n        return selectedTiles;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.cutSelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selectedTiles = this.tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.isSelected; }));\n        if (selectedTiles.length) {\n            this.copyTiles(selectedTiles, true);\n        }\n        return selectedTiles;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.deleteSelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selectedTiles = this.tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.isSelected; }));\n        if (selectedTiles.length) {\n            this.removeTiles(selectedTiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.id; })));\n        }\n        return selectedTiles;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.paste = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.clipboardService || !this.clipboardService.isAvailable('tiles')) {\n            return [];\n        }\n        /** @type {?} */\n        var sourceTiles = (/** @type {?} */ (this.clipboardService.get('tiles')));\n        // Unselect all tiles\n        this.tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.isSelected = false; }));\n        // Get max rectangle\n        /** @type {?} */\n        var bounds;\n        sourceTiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            bounds = bounds ? Rect.union(bounds, tile.percentBounds) : new Rect(tile.percentBounds);\n        }));\n        /** @type {?} */\n        var targetBounds = this.getFreePlace(new Rect(0, 0, bounds.width, bounds.height));\n        /** @type {?} */\n        var newTiles = sourceTiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            /** @type {?} */\n            var newTile = new DejaTile((/** @type {?} */ ({\n                type: tile.type,\n                bounds: new Rect(targetBounds.left + tile.percentBounds.left - bounds.left, targetBounds.top + tile.percentBounds.top - bounds.top, tile.percentBounds.width, tile.percentBounds.height),\n                templateModel: tile.templateModel,\n                color: tile.color,\n            })));\n            newTile.isSelected = true;\n            return newTile;\n        }));\n        this.addTiles(newTiles);\n        return newTiles;\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileElementFromHTMLElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tileElement = element;\n        while (tileElement && tileElement.tagName !== 'DEJA-TILE') {\n            tileElement = tileElement.parentElement;\n            if (tileElement === this.container) {\n                return undefined;\n            }\n        }\n        return tileElement;\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileComponentFromHTMLElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tileElement = this.getTileElementFromHTMLElement(element);\n        return tileElement && this.tilesDic[tileElement.id];\n    };\n    /**\n     * @param {?} tilesToDelete\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.deleteTiles = /**\n     * @param {?} tilesToDelete\n     * @return {?}\n     */\n    function (tilesToDelete) {\n        var _this = this;\n        if (!tilesToDelete || tilesToDelete.length === 0) {\n            return;\n        }\n        // For event after removed finished\n        /** @type {?} */\n        var event = (/** @type {?} */ (new CustomEvent('DejaTilesModelEvent', { cancelable: false })));\n        event.removed = tilesToDelete.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        tilesToDelete.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            delete _this.tilesDic[tile.id];\n            tile.delete();\n        }));\n        /** @type {?} */\n        var index = this.tiles.length;\n        while (--index >= 0) {\n            /** @type {?} */\n            var tile = this.tiles[index];\n            if (!this.tilesDic[tile.id]) {\n                this.tiles.splice(index, 1);\n            }\n        }\n        this.refreshTiles$.next({ resetWidth: true });\n        event.tiles = this.tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        this.modelChanged.next(event);\n    };\n    /**\n     * @param {?} tileIdsToRemove\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.removeTiles = /**\n     * @param {?} tileIdsToRemove\n     * @return {?}\n     */\n    function (tileIdsToRemove) {\n        var _this = this;\n        if (!tileIdsToRemove || tileIdsToRemove.length === 0) {\n            return;\n        }\n        /** @type {?} */\n        var tilesToRemove = tileIdsToRemove.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        function (id) { return _this.tilesDic[id]; }));\n        // Delete selected tiles components\n        tilesToRemove.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            tile.isHidden = true;\n        }));\n        /** @type {?} */\n        var event = (/** @type {?} */ (new CustomEvent('DejaTilesRemoveEvent', { cancelable: true })));\n        event.tiles = this.tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        event.removed = tilesToRemove.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        event.cancel$ = new Subject();\n        /** @type {?} */\n        var cancelSubscription = event.cancel$.pipe(first())\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value) {\n                tilesToRemove.forEach((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return tile.isHidden = false; }));\n            }\n            else {\n                _this.deleteTiles(tilesToRemove);\n            }\n        }));\n        // Forward event\n        this.contentRemoving.next(event);\n        // Remove immediately\n        if (!event.defaultPrevented) {\n            cancelSubscription.unsubscribe();\n            this.deleteTiles(tilesToRemove);\n        }\n    };\n    /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.createTiles = /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    function (tiles) {\n        if (!tiles || tiles.length === 0) {\n            return;\n        }\n        this.addTiles(tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return new DejaTile(tile); })));\n    };\n    /**\n     * @param {?} idealBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getFreePlace = /**\n     * @param {?} idealBounds\n     * @return {?}\n     */\n    function (idealBounds) {\n        /** @type {?} */\n        var freePlaces = (/** @type {?} */ ([]));\n        /** @type {?} */\n        var maxHeight = 0;\n        this.tiles.forEach((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            if (t.percentBounds.bottom > maxHeight) {\n                maxHeight = t.percentBounds.bottom;\n            }\n        }));\n        for (var x = 0; x <= this._maxWidth - idealBounds.width; x += this._tileMinWidth) {\n            var _loop_1 = function (y) {\n                /** @type {?} */\n                var currentBounds = new Rect(x, y, idealBounds.width, idealBounds.height);\n                if (this_1.tiles.filter((/**\n                 * @param {?} t\n                 * @return {?}\n                 */\n                function (t) { return t.percentBounds.intersectWith(currentBounds); })).length === 0) {\n                    freePlaces.push(currentBounds);\n                }\n            };\n            var this_1 = this;\n            for (var y = 0; y <= maxHeight - idealBounds.height; y += this._tileMinHeight) {\n                _loop_1(y);\n            }\n        }\n        if (freePlaces.length > 0) {\n            // add at the nearest free place\n            freePlaces.sort((/**\n             * @param {?} bounds1\n             * @param {?} bounds2\n             * @return {?}\n             */\n            function (bounds1, bounds2) {\n                /** @type {?} */\n                var calcDistance = (/**\n                 * @param {?} bounds\n                 * @return {?}\n                 */\n                function (bounds) { return Math.min(Math.abs(bounds.left - idealBounds.left), Math.abs(bounds.right - idealBounds.right)) + 200 * Math.min(Math.abs(bounds.top - idealBounds.top), Math.abs(bounds.bottom - idealBounds.bottom)); });\n                return calcDistance(bounds1) - calcDistance(bounds2);\n            }));\n            return freePlaces[0];\n        }\n        // Add at the end\n        return new Rect(0, maxHeight, idealBounds.width, idealBounds.height);\n    };\n    /**\n     * @param {?} id\n     * @param {?} bounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.moveTile = /**\n     * @param {?} id\n     * @param {?} bounds\n     * @return {?}\n     */\n    function (id, bounds) {\n        /** @type {?} */\n        var tile = this.tiles.find((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) { return t.id === id; }));\n        if (tile) {\n            tile.percentBounds = bounds;\n            this.refreshTiles$.next();\n        }\n    };\n    /**\n     * @param {?} pixelBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.HitTest = /**\n     * @param {?} pixelBounds\n     * @return {?}\n     */\n    function (pixelBounds) {\n        /** @type {?} */\n        var percentBounds = new Rect(this.getPercentSize(pixelBounds.left), this.getPercentSize(pixelBounds.top), this.getPercentSize(pixelBounds.width), this.getPercentSize(pixelBounds.height));\n        return this.tiles.filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) { return t.percentBounds.intersectWith(percentBounds); }));\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getPercentSize = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return Math.round(value * 100 / this.hundredPercentWith);\n    };\n    // Drag and drop from outside provider\n    // Drag and drop from outside provider\n    /**\n     * @param {?} dragContext\n     * @param {?} dragCursor\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.dragEnter = \n    // Drag and drop from outside provider\n    /**\n     * @param {?} dragContext\n     * @param {?} dragCursor\n     * @return {?}\n     */\n    function (dragContext, dragCursor) {\n        if (!this.designMode || !this._container) {\n            return false;\n        }\n        /** @type {?} */\n        var tile = (/** @type {?} */ (dragContext.IDejaTile));\n        if (!tile) {\n            return false;\n        }\n        /** @type {?} */\n        var containerBounds = this._container.getBoundingClientRect();\n        var _a = dragCursor.originalEvent, pageX = _a.pageX, pageY = _a.pageY;\n        /** @type {?} */\n        var x = pageX - containerBounds.left;\n        /** @type {?} */\n        var y = pageY - containerBounds.top;\n        // Create a temporary tile for drag and drop\n        tile.id = '#temp';\n        /** @type {?} */\n        var tempTile = new DejaTile(tile);\n        tempTile.isTemporary = true;\n        this.dragDropInfos$.next((/** @type {?} */ ({\n            enabled: false,\n            startX: x,\n            startY: y,\n            tiles: [tempTile],\n        })));\n        return true;\n    };\n    /**\n     * @param {?} tiles\n     * @param {?} pageX\n     * @param {?} pageY\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.startDrag = /**\n     * @param {?} tiles\n     * @param {?} pageX\n     * @param {?} pageY\n     * @return {?}\n     */\n    function (tiles, pageX, pageY) {\n        var _this = this;\n        // Save layout\n        /** @type {?} */\n        var savedLayout = this.saveLayout();\n        // Bring all tiles together\n        /** @type {?} */\n        var targetBounds;\n        tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            targetBounds = targetBounds ? Rect.union(targetBounds, tile.percentBounds) : tile.percentBounds;\n            tile.isDragging = true;\n        }));\n        this.dragRelativePosition = {};\n        tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { _this.dragRelativePosition[tile.id] = new Position(tile.percentBounds.left - targetBounds.left, tile.percentBounds.top - targetBounds.top); }));\n        this.dragPageOffset = new Position(pageX, pageY);\n        this.dragOriginalPosition = new Position(targetBounds.left, targetBounds.top);\n        this.targetBounds = savedLayout.targetBounds = savedLayout.validBounds = targetBounds;\n        this.originalLayout = savedLayout;\n        this.validLayout = undefined;\n    };\n    /**\n     * @param {?} tile\n     * @param {?} pixelHeight\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.expandTile = /**\n     * @param {?} tile\n     * @param {?} pixelHeight\n     * @return {?}\n     */\n    function (tile, pixelHeight) {\n        // Save layout\n        /** @type {?} */\n        var t = tile.id ? this.tilesDic[tile.id] : this.tiles.find((/**\n         * @param {?} tt\n         * @return {?}\n         */\n        function (tt) { return tt.equalsTo(tile); }));\n        if (this.beforeSizeLayout) {\n            this.restoreLayout(this.beforeSizeLayout);\n        }\n        else {\n            this.beforeSizeLayout = this.saveLayout();\n        }\n        this.expandedTile = t;\n        t.isExpanded = true;\n        /** @type {?} */\n        var percentHeight = Math.ceil(pixelHeight * 100 / this.hundredPercentWith);\n        /** @type {?} */\n        var bottom = t.percentBounds.top + percentHeight;\n        this.size(t, new Position(0, this.getPixelSize(bottom)), Directions.bottom);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.cancelExpand = /**\n     * @return {?}\n     */\n    function () {\n        if (this.beforeSizeLayout) {\n            this.expandedTile.isExpanded = false;\n            this.restoreLayout(this.beforeSizeLayout);\n            this.refreshTiles$.next();\n            this.beforeSizeLayout = undefined;\n        }\n    };\n    /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.cancelDrag = /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    function (tiles) {\n        if (this.moveTimOut) {\n            this.moveTimOut.unsubscribe();\n            this.moveTimOut = undefined;\n        }\n        from(tiles).pipe(filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return !!tile; })), tap((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            tile.isDragging = false;\n            tile.isDropping = true;\n        })), delay(1000))\n            .subscribe((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { tile.isDropping = false; }));\n        // Restore original layout\n        if (this.originalLayout) {\n            this.restoreLayout(this.originalLayout);\n        }\n        this.endDrag();\n    };\n    /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.drop = /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    function (tiles) {\n        var _this = this;\n        /** @type {?} */\n        var changed;\n        if (this.moveTimOut) {\n            this.moveTimOut.unsubscribe();\n            this.moveTimOut = undefined;\n        }\n        if (this.validLayout) {\n            this.restoreLayout(this.validLayout);\n            if (this._cursor !== 'move') {\n                // Only one tile can be resized at time\n                /** @type {?} */\n                var tile = tiles[0];\n                tile.percentBounds = new Rect(this.validLayout.validBounds);\n                tile.isDragging = false;\n            }\n            else {\n                from(tiles).pipe(filter((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return !!tile; })), tap((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) {\n                    /** @type {?} */\n                    var left = _this.validLayout.validBounds.left + _this.dragRelativePosition[tile.id].left;\n                    /** @type {?} */\n                    var top = _this.validLayout.validBounds.top + _this.dragRelativePosition[tile.id].top;\n                    tile.percentBounds = new Rect(left, top, tile.percentBounds.width, tile.percentBounds.height);\n                    tile.isDragging = false;\n                    tile.isDropping = true;\n                    if (tile.id === '#temp') {\n                        tile.makeId();\n                        _this.tilesDic[tile.id] = tile;\n                        delete _this.tilesDic['#temp'];\n                        _this.addTiles([tile]);\n                    }\n                })), delay(1000))\n                    .subscribe((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { tile.isDropping = false; }));\n            }\n            changed = this.tiles.filter((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) { return !Rect.equals(t.percentBounds, _this.originalLayout[t.id] && _this.originalLayout[t.id].bounds); }));\n            this.endDrag();\n        }\n        else {\n            this.removeTemporaryTile();\n            this.cancelDrag(tiles);\n        }\n        if (changed) {\n            /** @type {?} */\n            var event_2 = (/** @type {?} */ (new CustomEvent('DejaTilesEvent', { cancelable: true })));\n            event_2.tiles = this.tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            this.layoutChanged.next(event_2);\n        }\n        return changed;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.endDrag = /**\n     * @return {?}\n     */\n    function () {\n        this.originalLayout = undefined;\n        this.validLayout = undefined;\n        this.targetBounds = undefined;\n        this.dragging$.next(false);\n        this.dragDropInfos$.next(null);\n        this.dragTarget = undefined;\n        this.copyTiles(null);\n        this.refreshTiles$.next();\n    };\n    /**\n     * @param {?} tiles\n     * @param {?} pageX\n     * @param {?} pageY\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.drag = /**\n     * @param {?} tiles\n     * @param {?} pageX\n     * @param {?} pageY\n     * @return {?}\n     */\n    function (tiles, pageX, pageY) {\n        var _this = this;\n        // Search related coords\n        /** @type {?} */\n        var offset = new Position(pageX - this.dragPageOffset.left, pageY - this.dragPageOffset.top);\n        /** @type {?} */\n        var offsetLeft = offset.left + this.getPixelSize(this.dragOriginalPosition.left);\n        /** @type {?} */\n        var offsetTop = offset.top + this.getPixelSize(this.dragOriginalPosition.top);\n        /** @type {?} */\n        var sizeMin = this.getTileMinPixelSize();\n        /** @type {?} */\n        var sizeMax = this.getTileMaxPixelSize();\n        if (this._cursor !== 'move') {\n            // Only one tile can be resized at time\n            /** @type {?} */\n            var tile = tiles[0];\n            /** @type {?} */\n            var bounds = this.getPixelBounds(tile.percentBounds);\n            /** @type {?} */\n            var offsetRight = offsetLeft + bounds.width;\n            /** @type {?} */\n            var offsetBottom = offsetTop + bounds.height;\n            /** @type {?} */\n            var right = bounds.right;\n            /** @type {?} */\n            var bottom = bounds.bottom;\n            switch (this._cursor) {\n                case 'nw-resize':\n                    bounds.left = Math.max(Math.min(offsetLeft, bounds.right - sizeMin.width), bounds.right - sizeMax.width);\n                    bounds.right = right;\n                    bounds.top = Math.max(Math.min(offsetTop, bounds.bottom - sizeMin.height), bounds.bottom - sizeMax.height);\n                    bounds.bottom = bottom;\n                    this.size(tile, new Position(offsetLeft, offsetTop), Directions.left + Directions.top);\n                    break;\n                case 'sw-resize':\n                    bounds.left = Math.max(Math.min(offsetLeft, bounds.right - sizeMin.width), bounds.right - sizeMax.width);\n                    bounds.right = right;\n                    bounds.bottom = Math.max(Math.min(offsetBottom, bounds.top + sizeMax.height), bounds.top + sizeMin.height);\n                    this.size(tile, new Position(offsetLeft, offsetBottom), Directions.left + Directions.bottom);\n                    break;\n                case 'w-resize':\n                    bounds.left = Math.max(Math.min(offsetLeft, bounds.right - sizeMin.width), bounds.right - sizeMax.width);\n                    bounds.right = right;\n                    this.size(tile, new Position(offsetLeft, 0), Directions.left);\n                    break;\n                case 'ne-resize':\n                    bounds.right = Math.max(Math.min(offsetRight, bounds.left + sizeMax.width), bounds.left + sizeMin.width);\n                    bounds.top = Math.max(Math.min(offsetTop, bounds.bottom - sizeMin.height), bounds.bottom - sizeMax.height);\n                    bounds.bottom = bottom;\n                    this.size(tile, new Position(offsetRight, offsetTop), Directions.right + Directions.top);\n                    break;\n                case 'se-resize':\n                    bounds.right = Math.max(Math.min(offsetRight, bounds.left + sizeMax.width), bounds.left + sizeMin.width);\n                    bounds.bottom = Math.max(Math.min(offsetBottom, bounds.top + sizeMax.height), bounds.top + sizeMin.height);\n                    this.size(tile, new Position(offsetRight, offsetBottom), Directions.right + Directions.bottom);\n                    break;\n                case 'e-resize':\n                    bounds.right = Math.max(Math.min(offsetRight, bounds.left + sizeMax.width), bounds.left + sizeMin.width);\n                    this.size(tile, new Position(offsetRight, 0), Directions.right);\n                    break;\n                case 'n-resize':\n                    bounds.top = Math.max(Math.min(offsetTop, bounds.bottom - sizeMin.height), bounds.bottom - sizeMax.height);\n                    bounds.bottom = bottom;\n                    this.size(tile, new Position(0, offsetTop), Directions.top);\n                    break;\n                case 's-resize':\n                    bounds.bottom = Math.max(Math.min(offsetBottom, bounds.top + sizeMax.height), bounds.top + sizeMin.height);\n                    this.size(tile, new Position(0, offsetBottom), Directions.bottom);\n                    break;\n                default:\n                    throw new Error('Invalid direction');\n            }\n            tile.pixelBounds = bounds;\n        }\n        else {\n            tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { tile.pixelBounds = new Rect(offsetLeft + _this.getPixelSize(_this.dragRelativePosition[tile.id].left), offsetTop + _this.getPixelSize(_this.dragRelativePosition[tile.id].top), _this.getPixelSize(tile.percentBounds.width), _this.getPixelSize(tile.percentBounds.height)); }));\n            // Assign new drag and drop rectangle\n            this.dragTarget = new Rect(this.getPercentSize(offsetLeft), this.getPercentSize(offsetTop), this.targetBounds.width, this.targetBounds.height);\n            this.move();\n        }\n    };\n    /**\n     * @param {?} newTiles\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.addTiles = /**\n     * @param {?} newTiles\n     * @return {?}\n     */\n    function (newTiles) {\n        var _this = this;\n        if (!newTiles || newTiles.length === 0) {\n            return;\n        }\n        newTiles.forEach((/**\n         * @param {?} newTile\n         * @return {?}\n         */\n        function (newTile) {\n            if (!_this.tiles.find((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) { return t.id === newTile.id; }))) {\n                newTile.percentBounds = _this.getFreePlace(newTile.percentBounds);\n                _this.tiles.push(newTile);\n                _this.tilesDic[newTile.id] = newTile;\n            }\n        }));\n        /** @type {?} */\n        var event = (/** @type {?} */ (new CustomEvent('DejaTilesAddEvent', { cancelable: true })));\n        event.tiles = this.tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        event.added = newTiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return tile.toTileModel(); }));\n        event.cancel$ = new Subject();\n        // Delete provider if cut operation\n        /** @type {?} */\n        var deleteSourceProvider$ = this.clipboardService && (/** @type {?} */ (this.clipboardService.get('tiles-provider')));\n        // Hide originals if cut\n        /** @type {?} */\n        var sourceTiles;\n        if (deleteSourceProvider$) {\n            sourceTiles = (/** @type {?} */ (this.clipboardService.get('tiles')));\n            sourceTiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) {\n                tile.isHidden = true;\n            }));\n        }\n        /** @type {?} */\n        var deleteSourceTiles = (/**\n         * @return {?}\n         */\n        function () {\n            if (sourceTiles) {\n                deleteSourceProvider$.next(sourceTiles);\n                _this.clipboardService.clear();\n            }\n        });\n        newTiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            tile.isPending = true;\n        }));\n        /** @type {?} */\n        var validateNewTiles = (/**\n         * @param {?} tiles\n         * @return {?}\n         */\n        function (tiles) {\n            tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) {\n                tile.isPending = false;\n            }));\n            // Remove original tiles if cut operation\n            deleteSourceTiles();\n            /** @type {?} */\n            var e = (/** @type {?} */ (new CustomEvent('DejaTilesModelEvent', { cancelable: false })));\n            e.tiles = _this.tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            e.added = tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            _this.modelChanged.next(e);\n        });\n        /** @type {?} */\n        var cancelSubscription = event.cancel$.pipe(first())\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value) {\n                // Canceled, hide and remove added after effect\n                from(newTiles).pipe(tap((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return tile.isHidden = true; })), delay(1000), reduce((/**\n                 * @param {?} acc\n                 * @param {?} cur\n                 * @return {?}\n                 */\n                function (acc, cur) { return __spread(acc, [cur]); }), []), first())\n                    .subscribe((/**\n                 * @param {?} tiles\n                 * @return {?}\n                 */\n                function (tiles) { return _this.deleteTiles(tiles); }));\n                // Reshow original tiles if cut operation\n                if (sourceTiles) {\n                    sourceTiles.forEach((/**\n                     * @param {?} tile\n                     * @return {?}\n                     */\n                    function (tile) {\n                        tile.isHidden = false;\n                        tile.isCutted = true;\n                    }));\n                }\n            }\n            else {\n                validateNewTiles(newTiles);\n            }\n        }));\n        // Get total rectangle\n        /** @type {?} */\n        var bounds;\n        newTiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            bounds = bounds ? Rect.union(bounds, tile.percentBounds) : new Rect(tile.percentBounds);\n        }));\n        this.refreshTiles$.next({ ensureBounds: bounds });\n        this.contentAdding.next(event);\n        if (!event.defaultPrevented) {\n            // Add immediately\n            cancelSubscription.unsubscribe();\n            validateNewTiles(newTiles);\n        }\n    };\n    /**\n     * @private\n     * @param {?} tile\n     * @param {?} pixelPos\n     * @param {?} directions\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.size = /**\n     * @private\n     * @param {?} tile\n     * @param {?} pixelPos\n     * @param {?} directions\n     * @return {?}\n     */\n    function (tile, pixelPos, directions) {\n        // Calc new tile bounds\n        /** @type {?} */\n        var percentPos = new Position(this.getPercentSize(pixelPos.left), this.getPercentSize(pixelPos.top));\n        /** @type {?} */\n        var dragBounds = tile.percentBounds.clone();\n        /** @type {?} */\n        var newTargetBounds = tile.percentBounds.clone();\n        /** @type {?} */\n        var minWidth;\n        /** @type {?} */\n        var minHeight;\n        /** @type {?} */\n        var maxWidth;\n        /** @type {?} */\n        var maxHeight;\n        // tslint:disable-next-line:no-bitwise\n        if (directions & Directions.left) {\n            minWidth = this.getTileMinPercentWidth();\n            maxWidth = this.getTileMaxPercentWidth();\n            /** @type {?} */\n            var dLeft = percentPos.left;\n            /** @type {?} */\n            var tLeft = dragBounds.left < dLeft ? minWidth * Math.ceil(dLeft / minWidth) : minWidth * Math.floor(dLeft / minWidth);\n            /** @type {?} */\n            var tWidth = Math.min(maxWidth, Math.max(minWidth, newTargetBounds.right - tLeft));\n            dragBounds.width = dragBounds.right - dLeft;\n            dragBounds.left = dLeft;\n            newTargetBounds.left = newTargetBounds.right - tWidth;\n            newTargetBounds.width = tWidth;\n        }\n        // tslint:disable-next-line:no-bitwise\n        if (directions & Directions.right) {\n            minWidth = minWidth || this.getTileMinPercentWidth();\n            maxWidth = maxWidth || this.getTileMaxPercentWidth();\n            /** @type {?} */\n            var dRight = percentPos.left;\n            /** @type {?} */\n            var tRight = dragBounds.right < dRight ? minWidth * Math.ceil(dRight / minWidth) : minWidth * Math.floor(dRight / minWidth);\n            dragBounds.width = dRight - dragBounds.left;\n            newTargetBounds.width = Math.min(maxWidth, Math.max(minWidth, tRight - newTargetBounds.left));\n        }\n        // tslint:disable-next-line:no-bitwise\n        if (directions & Directions.top) {\n            minHeight = this.getTileMinPercentHeight();\n            maxHeight = this.getTileMaxPercentHeight();\n            /** @type {?} */\n            var dTop = percentPos.top;\n            /** @type {?} */\n            var tTop = dragBounds.top < dTop ? minHeight * Math.ceil(dTop / minHeight) : minHeight * Math.floor(dTop / minHeight);\n            /** @type {?} */\n            var tHeight = Math.min(maxHeight, Math.max(minHeight, newTargetBounds.bottom - tTop));\n            dragBounds.height = dragBounds.bottom - dTop;\n            dragBounds.top = dTop;\n            newTargetBounds.top = newTargetBounds.bottom - tHeight;\n            newTargetBounds.height = tHeight;\n        }\n        // tslint:disable-next-line:no-bitwise\n        if (directions & Directions.bottom) {\n            minHeight = minHeight || this.getTileMinPercentHeight();\n            maxHeight = maxHeight || this.getTileMaxPercentHeight();\n            /** @type {?} */\n            var dBottom = percentPos.top;\n            /** @type {?} */\n            var tBottom = dragBounds.bottom < dBottom ? minHeight * Math.ceil(dBottom / minHeight) : minHeight * Math.floor(dBottom / minHeight);\n            dragBounds.height = dBottom - dragBounds.top;\n            newTargetBounds.height = Math.min(maxHeight, Math.max(minHeight, tBottom - newTargetBounds.top));\n        }\n        if (Rect.equals(newTargetBounds, this.destination)) {\n            // Nothing change, wait for timers\n            return;\n        }\n        // Restore a previous layout if exists for this position\n        if (tile.isExpanded) {\n            /** @type {?} */\n            var ensureBounds = this.ensureTarget(newTargetBounds, dragBounds, directions);\n            tile.percentBounds = ensureBounds;\n            this.refreshTiles$.next();\n        }\n        else {\n            // Restore the original layout before moving something\n            this.restoreLayout(this.originalLayout);\n            this.destination = newTargetBounds.clone();\n            // Check if location is free without pushing tiles\n            /** @type {?} */\n            var result = this.tiles.find((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) { return !t.isDragging && t.percentBounds.intersectWith(newTargetBounds); }));\n            if (!result) {\n                this.targetBounds = newTargetBounds;\n                // Save layout\n                this.validLayout = this.saveLayout();\n                this.validLayout.targetBounds = this.validLayout.validBounds = newTargetBounds;\n                this.refreshTiles$.next();\n            }\n            else {\n                // Location must be freed\n                if (newTargetBounds) {\n                    // Ensure new destination\n                    /** @type {?} */\n                    var ensureBounds = this.ensureTarget(newTargetBounds, dragBounds, directions);\n                    if (ensureBounds) {\n                        this.targetBounds = ensureBounds;\n                        this.validLayout = this.saveLayout();\n                        this.validLayout.targetBounds = newTargetBounds;\n                        this.validLayout.validBounds = ensureBounds;\n                        this.refreshTiles$.next();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.move = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var minWidth = this.getTileMinPercentWidth();\n        /** @type {?} */\n        var minHeight = this.getTileMinPercentHeight();\n        // Search a new target\n        /** @type {?} */\n        var newTargetBounds = this.ensureContainer(new Rect(minWidth * Math.round(this.dragTarget.left / minWidth), minHeight * Math.round(this.dragTarget.top / minHeight), this.dragTarget.width, this.dragTarget.height));\n        if (this.lastTargetBounds && Math.abs(newTargetBounds.left - this.lastTargetBounds.left) < minWidth && Math.abs(newTargetBounds.top - this.lastTargetBounds.top) < minHeight) {\n            // Nothing change, wait for timers\n            return;\n        }\n        this.lastTargetBounds = newTargetBounds;\n        if (this.moveTimOut) {\n            this.moveTimOut.unsubscribe();\n            this.moveTimOut = undefined;\n        }\n        // Restore the original layout before moving something\n        this.restoreLayout(this.originalLayout);\n        // Check if location is free without pushing tiles\n        /** @type {?} */\n        var result = this.tiles.find((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return !tile.isDragging && tile.percentBounds.intersectWith(newTargetBounds); }));\n        if (!result) {\n            this.targetBounds = newTargetBounds.clone();\n            this.destination = newTargetBounds.clone();\n            // Save layout\n            this.validLayout = this.saveLayout();\n            this.validLayout.targetBounds = this.validLayout.validBounds = newTargetBounds;\n            this.refreshTiles$.next();\n        }\n        else {\n            // Location must be freed, timer\n            this.moveTimOut = timer(500).pipe(first())\n                .subscribe((/**\n             * @return {?}\n             */\n            function () {\n                // console.log('moveTimer timer');\n                _this.moveTimOut = undefined;\n                _this.destination = newTargetBounds.clone();\n                if (newTargetBounds) {\n                    // Ensure new destination\n                    /** @type {?} */\n                    var ensureBounds = _this.ensureTarget(newTargetBounds, _this.dragTarget, Directions.all);\n                    if (ensureBounds) {\n                        _this.targetBounds = ensureBounds;\n                        _this.validLayout = _this.saveLayout();\n                        _this.validLayout.targetBounds = newTargetBounds;\n                        _this.validLayout.validBounds = ensureBounds;\n                        _this.refreshTiles$.next();\n                    }\n                }\n            }));\n        }\n    };\n    // Ensure that the specified bounds are inside the tiles area. Return the corrected rectangle.\n    // Ensure that the specified bounds are inside the tiles area. Return the corrected rectangle.\n    /**\n     * @private\n     * @param {?} percentBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.ensureContainer = \n    // Ensure that the specified bounds are inside the tiles area. Return the corrected rectangle.\n    /**\n     * @private\n     * @param {?} percentBounds\n     * @return {?}\n     */\n    function (percentBounds) {\n        if (percentBounds.left < 0) {\n            percentBounds = percentBounds.offset(-percentBounds.left, 0);\n        }\n        if (percentBounds.top < 0) {\n            percentBounds = percentBounds.offset(0, -percentBounds.top);\n        }\n        /** @type {?} */\n        var maxPercentWidth = this.getMaxPercentWidth();\n        if (maxPercentWidth && percentBounds.right > maxPercentWidth) {\n            percentBounds = percentBounds.offset(maxPercentWidth - percentBounds.right, 0);\n        }\n        /** @type {?} */\n        var maxPercentHeight = this.getMaxPercentHeight();\n        if (maxPercentHeight && percentBounds.bottom > maxPercentHeight) {\n            percentBounds = percentBounds.offset(0, maxPercentHeight - percentBounds.bottom);\n        }\n        return percentBounds;\n    };\n    // Ensure that a tile can be dropped at the specified bounds. Return the corrected rectangle.\n    // Ensure that a tile can be dropped at the specified bounds. Return the corrected rectangle.\n    /**\n     * @private\n     * @param {?} bounds\n     * @param {?=} effectiveBounds\n     * @param {?=} directions\n     * @param {?=} originalBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.ensureTarget = \n    // Ensure that a tile can be dropped at the specified bounds. Return the corrected rectangle.\n    /**\n     * @private\n     * @param {?} bounds\n     * @param {?=} effectiveBounds\n     * @param {?=} directions\n     * @param {?=} originalBounds\n     * @return {?}\n     */\n    function (bounds, effectiveBounds, directions, originalBounds) {\n        if (!effectiveBounds) {\n            effectiveBounds = bounds;\n        }\n        // Backup bounds\n        if (!originalBounds) {\n            originalBounds = bounds.clone();\n        }\n        if (!directions) {\n            directions = Directions.all;\n        }\n        else {\n            // We always can escape to the bottom in case of\n            // tslint:disable-next-line:no-bitwise\n            directions |= Directions.bottom;\n        }\n        /** @type {?} */\n        var leftTilesToPush = (/** @type {?} */ ([]));\n        /** @type {?} */\n        var rightTilesToPush = (/** @type {?} */ ([]));\n        /** @type {?} */\n        var topTilesToPush = (/** @type {?} */ ([]));\n        /** @type {?} */\n        var bottomTilesToPush = (/** @type {?} */ ([]));\n        // tslint:disable-next-line:prefer-for-of\n        for (var id in this.tilesDic) {\n            if (this.tilesDic[id]) {\n                /** @type {?} */\n                var tile = this.tilesDic[id];\n                if (!tile.isDragging && !tile.isExpanded) {\n                    if (tile.percentBounds.intersectWith(bounds)) {\n                        /** @type {?} */\n                        var swapTargetRect = new Rect(this.dragOriginalPosition.left, this.dragOriginalPosition.top, bounds.width, bounds.height);\n                        if (tile.percentBounds.left === effectiveBounds.left && tile.percentBounds.top === effectiveBounds.top && tile.percentBounds.width === effectiveBounds.width && tile.percentBounds.height === effectiveBounds.height && effectiveBounds.adjacent(swapTargetRect)) {\n                            // swap\n                            tile.percentBounds = swapTargetRect;\n                            return bounds;\n                        }\n                        else {\n                            /** @type {?} */\n                            var hol = tile.percentBounds.left - effectiveBounds.left;\n                            // Ce qui depasse a gauche\n                            /** @type {?} */\n                            var hor = effectiveBounds.right - tile.percentBounds.right;\n                            // Ce qui depasse a droite\n                            /** @type {?} */\n                            var vot = tile.percentBounds.top - effectiveBounds.top;\n                            // Ce qui depasse en haut\n                            /** @type {?} */\n                            var vob = effectiveBounds.bottom - tile.percentBounds.bottom;\n                            // Ce qui depasse en bas\n                            /** @type {?} */\n                            var hoe = Math.max(0, Math.min(tile.percentBounds.right, effectiveBounds.right) - Math.max(tile.percentBounds.left, effectiveBounds.left)) / Math.min(tile.percentBounds.width, effectiveBounds.width);\n                            /** @type {?} */\n                            var voe = Math.max(0, Math.min(tile.percentBounds.bottom, effectiveBounds.bottom) - Math.max(tile.percentBounds.top, effectiveBounds.top)) / Math.min(tile.percentBounds.height, effectiveBounds.height);\n                            // Calc preferred direction\n                            /** @type {?} */\n                            var preferredDirection = void 0;\n                            // tslint:disable-next-line:no-bitwise\n                            if (voe >= hoe && directions & Directions.horizontal) {\n                                // horizontal\n                                // tslint:disable-next-line:no-bitwise\n                                preferredDirection = hor >= hol && (directions & Directions.left) ? Directions.left : Directions.right;\n                            }\n                            else {\n                                // vertical\n                                // tslint:disable-next-line:no-bitwise\n                                preferredDirection = vob >= vot && (directions & Directions.top) ? Directions.top : Directions.bottom;\n                            }\n                            switch (preferredDirection) {\n                                case Directions.left:\n                                    leftTilesToPush.push(tile);\n                                    break;\n                                case Directions.top:\n                                    topTilesToPush.push(tile);\n                                    break;\n                                case Directions.right:\n                                    rightTilesToPush.push(tile);\n                                    break;\n                                default:\n                                    bottomTilesToPush.push(tile);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // try first horizontal move\n        /** @type {?} */\n        var remain = 0;\n        if (leftTilesToPush.length) {\n            remain = this.pushHorizontal(bounds, -1, leftTilesToPush);\n            if (remain) {\n                bounds = this.ensureContainer(bounds.offset(remain, 0));\n                // tslint:disable-next-line:no-bitwise\n                return this.ensureTarget(bounds, effectiveBounds, directions & ~Directions.left, originalBounds);\n            }\n        }\n        // Now try right\n        if (rightTilesToPush.length) {\n            remain = this.pushHorizontal(bounds, 1, rightTilesToPush);\n        }\n        if (remain > 0) {\n            // No horizontal place, restore original position\n            this.restoreLayout(this.originalLayout);\n            // tslint:disable-next-line:no-bitwise\n            return this.ensureTarget(originalBounds, effectiveBounds, directions & Directions.vertical);\n        }\n        else {\n            // Try top\n            if (topTilesToPush.length) {\n                remain = this.pushVertical(bounds, -1, topTilesToPush);\n                if (remain) {\n                    bounds = this.ensureContainer(bounds.offset(0, remain));\n                    return this.ensureTarget(bounds, effectiveBounds, Directions.bottom);\n                }\n            }\n            // And finally bottom\n            remain = this.pushVertical(bounds, 1, bottomTilesToPush);\n            if (remain) {\n                // Destination is not available, keep tile at the original place\n                return null;\n            }\n        }\n        return bounds;\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.saveLayout = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var layout = (/** @type {?} */ ({}));\n        layout.height = this.getTileMinPercentHeight();\n        this.tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            /** @type {?} */\n            var y = _this.getPixelSize(tile.percentBounds.top || 0);\n            /** @type {?} */\n            var h = _this.getPixelSize(tile.percentBounds.height || _this._tileMinHeight);\n            if (y + h > layout.height) {\n                layout.height = y + h;\n            }\n            layout[tile.id] = (/** @type {?} */ ({\n                bounds: tile.percentBounds.clone(),\n                id: tile.id,\n            }));\n        }));\n        return layout;\n    };\n    /**\n     * @private\n     * @param {?} rect\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getPixelBounds = /**\n     * @private\n     * @param {?} rect\n     * @return {?}\n     */\n    function (rect) { return Rect.fromLTRB(Math.round(rect.left * this.hundredPercentWith / 100), Math.round(rect.top * this.hundredPercentWith / 100), Math.round(rect.right * this.hundredPercentWith / 100), Math.round(rect.bottom * this.hundredPercentWith / 100)); };\n    /**\n     * @private\n     * @param {?} value\n     * @param {?=} unit\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getPixelSize = /**\n     * @private\n     * @param {?} value\n     * @param {?=} unit\n     * @return {?}\n     */\n    function (value, unit) {\n        if (!unit || unit === '%') {\n            return Math.round(value * this.hundredPercentWith / 100);\n        }\n        else {\n            return value;\n        }\n    };\n    /**\n     * @private\n     * @param {?} prop\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getSizePercentLimit = /**\n     * @private\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        /** @type {?} */\n        var self = (/** @type {?} */ (this));\n        /** @type {?} */\n        var unit = self[prop + \"Unit\"];\n        if (!unit || unit === 'px') {\n            return this.getPercentSize(self[prop]);\n        }\n        else {\n            return self[prop];\n        }\n    };\n    /**\n     * @private\n     * @param {?} prop\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getSizePixelLimit = /**\n     * @private\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        /** @type {?} */\n        var self = (/** @type {?} */ (this));\n        /** @type {?} */\n        var unit = self[prop + \"Unit\"];\n        if (!unit || unit === 'px') {\n            return self[prop];\n        }\n        else {\n            return this.getPixelSize(self[prop]);\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMinPixelSize = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return new Size(this.getSizePixelLimit('_tileMinWidth'), this.getSizePixelLimit('_tileMinHeight'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMaxPixelSize = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return new Size(this.getSizePixelLimit('_tileMaxWidth'), this.getSizePixelLimit('_tileMaxHeight'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMinPercentWidth = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(1, this.getSizePercentLimit('_tileMinWidth'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMaxPercentWidth = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(5, this.getSizePercentLimit('_tileMaxWidth'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMinPercentHeight = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(1, this.getSizePercentLimit('_tileMinHeight'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getTileMaxPercentHeight = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(5, this.getSizePercentLimit('_tileMaxHeight'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getMaxPercentWidth = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(5, this.getSizePercentLimit('_maxWidth'));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getMaxPercentHeight = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        return Math.max(5, this.getSizePercentLimit('_maxHeight'));\n    };\n    /**\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @param {?} element\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.getCursorFromHTMLElement = /**\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @param {?} element\n     * @return {?}\n     */\n    function (x, y, element) {\n        /** @type {?} */\n        var tileElement = this.getTileElementFromHTMLElement(element);\n        if (!tileElement) {\n            return null;\n        }\n        /** @type {?} */\n        var bounds = tileElement.getBoundingClientRect();\n        if (x < bounds.left + 10) {\n            if (y < bounds.top + 10) {\n                return 'nw-resize';\n            }\n            else if (y > bounds.bottom - 10) {\n                return 'sw-resize';\n            }\n            else {\n                return 'w-resize';\n            }\n        }\n        else if (x > bounds.right - 10) {\n            if (y < bounds.top + 10) {\n                return 'ne-resize';\n            }\n            else if (y > bounds.bottom - 10) {\n                return 'se-resize';\n            }\n            else {\n                return 'e-resize';\n            }\n        }\n        else {\n            if (y < bounds.top + 10) {\n                return 'n-resize';\n            }\n            else if (y > bounds.bottom - 10) {\n                return 's-resize';\n            }\n            else {\n                return 'move';\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.extractValueAndUnit = /**\n     * @private\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    function (prop, value) {\n        /** @type {?} */\n        var regexp = /(\\d+)(.*)/i;\n        /** @type {?} */\n        var matches = regexp.exec(value);\n        if (matches && matches.length >= 1) {\n            /** @type {?} */\n            var self_1 = (/** @type {?} */ (this));\n            self_1[prop] = parseInt(matches[1], 10);\n            if (matches.length >= 2) {\n                self_1[prop + \"Unit\"] = matches[2];\n            }\n            else {\n                self_1[prop + \"Unit\"] = 'px';\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {?} layout\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.restoreLayout = /**\n     * @private\n     * @param {?} layout\n     * @return {?}\n     */\n    function (layout) {\n        this.tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) {\n            /** @type {?} */\n            var config = (/** @type {?} */ (layout[tile.id]));\n            tile.percentBounds = config.bounds.clone();\n        }));\n    };\n    /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?=} blackList\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.calcHorizontalOverflow = /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?=} blackList\n     * @return {?}\n     */\n    function (direction, tiles, offset, blackList) {\n        var _this = this;\n        /** @type {?} */\n        var overflow = 0;\n        blackList = blackList || {};\n        tiles.forEach((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            if (!blackList[t.id]) {\n                blackList[t.id] = t.id;\n                /** @type {?} */\n                var tryBounds_1 = t.percentBounds.offset(direction * offset, 0);\n                /** @type {?} */\n                var rightOffset = 0;\n                /** @type {?} */\n                var maxWidth = _this.getMaxPercentWidth();\n                if (tryBounds_1.left < 0) {\n                    rightOffset = -tryBounds_1.left;\n                }\n                else if (maxWidth && tryBounds_1.right > maxWidth) {\n                    rightOffset = tryBounds_1.right - maxWidth;\n                }\n                /** @type {?} */\n                var adjacentTiles = _this.tiles.filter((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return !tile.isDragging && !tile.equalsTo(t) && tile.percentBounds.intersectWith(tryBounds_1); }));\n                if (adjacentTiles.length) {\n                    rightOffset += _this.calcHorizontalOverflow(direction, adjacentTiles, offset, blackList);\n                }\n                if (rightOffset > overflow) {\n                    overflow = rightOffset;\n                }\n            }\n        }));\n        return overflow;\n    };\n    /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?} targetBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.moveHorizontal = /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?} targetBounds\n     * @return {?}\n     */\n    function (direction, tiles, offset, targetBounds) {\n        var _this = this;\n        tiles.forEach((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            if (!targetBounds[t.id]) {\n                // Offset tile\n                /** @type {?} */\n                var newBounds_1 = targetBounds[t.id] = t.percentBounds.offset(direction * offset, 0);\n                /** @type {?} */\n                var adjacentTiles = _this.tiles.filter((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return !tile.isDragging && !tile.equalsTo(t) && tile.percentBounds.intersectWith(newBounds_1); }));\n                if (adjacentTiles.length) {\n                    _this.moveHorizontal(direction, adjacentTiles, offset, targetBounds);\n                }\n            }\n        }));\n    };\n    /**\n     * @private\n     * @param {?} bounds\n     * @param {?} direction\n     * @param {?=} tiles\n     * @param {?=} offset\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.pushHorizontal = /**\n     * @private\n     * @param {?} bounds\n     * @param {?} direction\n     * @param {?=} tiles\n     * @param {?=} offset\n     * @return {?}\n     */\n    function (bounds, direction, tiles, offset) {\n        /** @type {?} */\n        var overflow = 0;\n        /** @type {?} */\n        var targetBounds = (/** @type {?} */ ({}));\n        if (!offset) {\n            offset = 0;\n            tiles.forEach((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) {\n                /** @type {?} */\n                var ho = direction > 0 ? Math.max(0, bounds.right - t.percentBounds.left) : Math.max(0, t.percentBounds.right - bounds.left);\n                if (ho > offset) {\n                    offset = ho;\n                }\n            }));\n        }\n        if (offset > 0) {\n            // Calc overflow space if all specified tiles are moved\n            overflow = this.calcHorizontalOverflow(direction, tiles, offset);\n            offset -= overflow;\n            if (offset > 0) {\n                this.moveHorizontal(direction, tiles, offset, targetBounds);\n                //  bounds array to tiles\n                this.tiles.forEach((/**\n                 * @param {?} t\n                 * @return {?}\n                 */\n                function (t) {\n                    if (targetBounds[t.id]) {\n                        t.percentBounds = targetBounds[t.id];\n                    }\n                }));\n            }\n        }\n        return overflow;\n    };\n    /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?=} blackList\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.calcVerticalOverflow = /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?=} blackList\n     * @return {?}\n     */\n    function (direction, tiles, offset, blackList) {\n        var _this = this;\n        /** @type {?} */\n        var overflow = 0;\n        blackList = blackList || {};\n        tiles.forEach((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            if (!blackList[t.id]) {\n                blackList[t.id] = t.id;\n                // Offset tile\n                /** @type {?} */\n                var tryBounds_2 = t.percentBounds.offset(0, direction * offset);\n                /** @type {?} */\n                var rightOffset = 0;\n                /** @type {?} */\n                var maxHeight = _this.getMaxPercentHeight();\n                if (tryBounds_2.top < 0) {\n                    rightOffset = -tryBounds_2.top;\n                }\n                else if (maxHeight && tryBounds_2.bottom > maxHeight) {\n                    rightOffset = tryBounds_2.bottom - maxHeight;\n                }\n                /** @type {?} */\n                var adjacentTiles = _this.tiles.filter((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return !tile.isDragging && !tile.equalsTo(t) && tile.percentBounds.intersectWith(tryBounds_2); }));\n                if (adjacentTiles.length) {\n                    rightOffset += _this.calcVerticalOverflow(direction, adjacentTiles, offset, blackList);\n                }\n                if (rightOffset > overflow) {\n                    overflow = rightOffset;\n                }\n            }\n        }));\n        return overflow;\n    };\n    /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?} targetBounds\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.moveVertical = /**\n     * @private\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?} offset\n     * @param {?} targetBounds\n     * @return {?}\n     */\n    function (direction, tiles, offset, targetBounds) {\n        var _this = this;\n        tiles.forEach((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            if (!targetBounds[t.id]) {\n                // Offset tile\n                /** @type {?} */\n                var newBounds_2 = targetBounds[t.id] = t.percentBounds.offset(0, direction * offset);\n                /** @type {?} */\n                var adjacentTiles = _this.tiles.filter((/**\n                 * @param {?} tile\n                 * @return {?}\n                 */\n                function (tile) { return !tile.isDragging && !tile.equalsTo(t) && tile.percentBounds.intersectWith(newBounds_2); }));\n                if (adjacentTiles.length) {\n                    _this.moveVertical(direction, adjacentTiles, offset, targetBounds);\n                }\n            }\n        }));\n    };\n    /**\n     * @private\n     * @param {?} bounds\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?=} offset\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.pushVertical = /**\n     * @private\n     * @param {?} bounds\n     * @param {?} direction\n     * @param {?} tiles\n     * @param {?=} offset\n     * @return {?}\n     */\n    function (bounds, direction, tiles, offset) {\n        /** @type {?} */\n        var overflow = 0;\n        /** @type {?} */\n        var targetBounds = (/** @type {?} */ ({}));\n        if (!offset) {\n            offset = 0;\n            tiles.forEach((/**\n             * @param {?} t\n             * @return {?}\n             */\n            function (t) {\n                /** @type {?} */\n                var vo = direction > 0 ? Math.max(0, bounds.bottom - t.percentBounds.top) : Math.max(0, t.percentBounds.bottom - bounds.top);\n                if (vo > offset) {\n                    offset = vo;\n                }\n            }));\n        }\n        if (offset > 0) {\n            // Calc overflow space if all specified tiles are moved\n            overflow = this.calcVerticalOverflow(direction, tiles, offset);\n            offset -= overflow;\n            if (offset > 0) {\n                this.moveVertical(direction, tiles, offset, targetBounds);\n                //  bounds array to tiles\n                this.tiles.forEach((/**\n                 * @param {?} t\n                 * @return {?}\n                 */\n                function (t) {\n                    if (targetBounds[t.id]) {\n                        t.percentBounds = targetBounds[t.id];\n                    }\n                }));\n            }\n        }\n        return overflow;\n    };\n    /**\n     * @private\n     * @param {?} tiles\n     * @param {?=} isCut\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.copyTiles = /**\n     * @private\n     * @param {?} tiles\n     * @param {?=} isCut\n     * @return {?}\n     */\n    function (tiles, isCut) {\n        if (!this.clipboardService) {\n            if (!tiles) {\n                return;\n            }\n            throw new Error('DejaClipboardService must be imported by your application to use the copyTiles methode of DejaTilesComponent.');\n        }\n        /** @type {?} */\n        var tt = (/** @type {?} */ (this.clipboardService.get('tiles')));\n        if (tt) {\n            tt.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.isCutted = false; }));\n        }\n        this.clipboardService.set('tiles', tiles);\n        if (isCut) {\n            tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.isCutted = true; }));\n            this.clipboardService.set('tiles-provider', this.deleteTiles$);\n        }\n        else {\n            this.clipboardService.set('tiles-provider', undefined);\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    DejaTilesLayoutProvider.prototype.removeTemporaryTile = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var index = this.tiles.length;\n        while (--index >= 0) {\n            /** @type {?} */\n            var tile = this.tiles[index];\n            if (tile.id === '#temp') {\n                this.tiles.splice(index, 1);\n            }\n        }\n        delete this.tilesDic['#temp'];\n    };\n    DejaTilesLayoutProvider.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    DejaTilesLayoutProvider.ctorParameters = function () { return [\n        { type: DejaClipboardService, decorators: [{ type: Optional }] }\n    ]; };\n    return DejaTilesLayoutProvider;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar noop = (/**\n * @return {?}\n */\nfunction () { });\nvar DejaTilesComponent = /** @class */ (function () {\n    function DejaTilesComponent(el, changeDetectorRef, layoutProvider, _control) {\n        var _this = this;\n        this.changeDetectorRef = changeDetectorRef;\n        this.layoutProvider = layoutProvider;\n        this._control = _control;\n        /**\n         * Raised when the selected items has changed\n         */\n        this.selectionChanged = new EventEmitter();\n        /**\n         * Raised when the layout has changed with a drag and drop\n         */\n        this.layoutChanged = new EventEmitter();\n        /**\n         * Raised when the layout is completed and all tiles are binded\n         */\n        this.layoutCompleted = new EventEmitter();\n        /**\n         * Raised before some tiles will be added to the data model with a paste\n         */\n        this.contentAdding = new EventEmitter();\n        /**\n         * Raised before some tiles will be removed from the data model with a delete\n         */\n        this.contentRemoving = new EventEmitter();\n        /**\n         * Raised when some tiles model has changed\n         */\n        this.modelChanged = new EventEmitter();\n        /**\n         * Raised when some tiles are copied in the clipboard service. Can result from a copy or paste operation on the tiles.\n         */\n        this.contentCopied = new EventEmitter();\n        /**\n         * Tab index of the focusable element\n         */\n        this.tabIndex = 0;\n        // NgModel implementation\n        this.onTouchedCallback = noop;\n        this.onChangeCallback = noop;\n        this._models = (/** @type {?} */ ([]));\n        this.isAlive = true;\n        this.hasFocus = false;\n        if (this._control) {\n            this._control.valueAccessor = this;\n        }\n        /** @type {?} */\n        var element = (/** @type {?} */ (el.nativeElement));\n        from(this.layoutProvider.selectionChanged).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) { return _this.selectionChanged.emit(e); }));\n        from(this.layoutProvider.contentAdding).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) { return _this.contentAdding.emit(e); }));\n        from(this.layoutProvider.contentRemoving).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} e\n         * @return {?}\n         */\n        function (e) { return _this.contentRemoving.emit(e); }));\n        from(this.layoutProvider.modelChanged).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.modelChanged.emit(event);\n            _this.onChangeCallback(event.tiles);\n        }));\n        from(this.layoutProvider.layoutChanged).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.layoutChanged.emit(event);\n            _this.onChangeCallback(event.tiles);\n        }));\n        from(this.layoutProvider.layoutCompleted).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) { return _this.layoutCompleted.emit(event); }));\n        this.keyup$ = (/** @type {?} */ (fromEvent(element.ownerDocument, 'keyup')));\n        fromEvent(window, 'resize').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), debounceTime(5))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.refresh({ resetWidth: true }); }));\n    }\n    Object.defineProperty(DejaTilesComponent.prototype, \"tiles\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.layoutProvider.tiles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"selectionRect$\", {\n        // provide a public access\n        get: \n        // provide a public access\n        /**\n         * @return {?}\n         */\n        function () {\n            return this.layoutProvider.selectionRect$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"tileminwidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.tileMinWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"tilemaxwidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.tileMaxWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"tileminheight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.tileMinHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"tilemaxheight\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.tileMaxHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"maxwidth\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.maxWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"designMode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.layoutProvider.designMode;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.layoutProvider.designMode = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"models\", {\n        set: /**\n         * @param {?} models\n         * @return {?}\n         */\n        function (models) {\n            this.writeValue(models);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"canDelete\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (coerceBooleanProperty(value) && !this.delete$sub) {\n                this.delete$sub = this.keyup$.pipe(filter((/**\n                 * @return {?}\n                 */\n                function () { return _this.layoutProvider.designMode; })), filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    /** @type {?} */\n                    var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n                    return keyCode === KeyCodes.Delete && _this.hasFocus;\n                })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.layoutProvider.deleteSelection(); }));\n            }\n            else if (this.delete$sub) {\n                this.delete$sub.unsubscribe();\n                this.delete$sub = undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"canCopy\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (coerceBooleanProperty(value) && !this.copy$sub) {\n                this.copy$sub = this.keyup$.pipe(filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    /** @type {?} */\n                    var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n                    return keyCode === KeyCodes.KeyC && event.ctrlKey && _this.hasFocus;\n                })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.copySelection();\n                }));\n            }\n            else if (this.copy$sub) {\n                this.copy$sub.unsubscribe();\n                this.copy$sub = undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"canCut\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (coerceBooleanProperty(value) && !this.cut$sub) {\n                this.cut$sub = this.keyup$.pipe(filter((/**\n                 * @return {?}\n                 */\n                function () { return _this.layoutProvider.designMode; })), filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    /** @type {?} */\n                    var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n                    return keyCode === KeyCodes.KeyX && event.ctrlKey && _this.hasFocus;\n                })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.cutSelection();\n                }));\n            }\n            else if (this.cut$sub) {\n                this.cut$sub.unsubscribe();\n                this.cut$sub = undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"canPaste\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (coerceBooleanProperty(value) && !this.paste$sub) {\n                this.paste$sub = this.keyup$.pipe(filter((/**\n                 * @return {?}\n                 */\n                function () { return _this.layoutProvider.designMode; })), filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    /** @type {?} */\n                    var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n                    return keyCode === KeyCodes.KeyV && event.ctrlKey && _this.hasFocus;\n                })))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.paste(); }));\n            }\n            else if (this.paste$sub) {\n                this.paste$sub.unsubscribe();\n                this.paste$sub = undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTilesComponent.prototype, \"selectedTiles\", {\n        set: /**\n         * @param {?} selectedTiles\n         * @return {?}\n         */\n        function (selectedTiles) {\n            this.layoutProvider.selectedTiles = selectedTiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return typeof tile === 'string' ? tile : ((/** @type {?} */ (tile))).id; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ************* ControlValueAccessor Implementation **************\n    // ************* ControlValueAccessor Implementation **************\n    /**\n     * @param {?} models\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.writeValue = \n    // ************* ControlValueAccessor Implementation **************\n    /**\n     * @param {?} models\n     * @return {?}\n     */\n    function (models) {\n        this._models = models || [];\n        /** @type {?} */\n        var tiles = this._models.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return new DejaTile(tile); }));\n        this.layoutProvider.tiles = tiles;\n        this.changeDetectorRef.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    // ************* End of ControlValueAccessor Implementation **************\n    // ************* End of ControlValueAccessor Implementation **************\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.ngAfterViewInit = \n    // ************* End of ControlValueAccessor Implementation **************\n    /**\n     * @return {?}\n     */\n    function () {\n        this.layoutProvider.container = this.tilesContainer.nativeElement;\n        this.refresh({ resetWidth: true });\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.layoutProvider.ngOnDestroy();\n        this.canCopy = false;\n        this.canCut = false;\n        this.canDelete = false;\n        this.canPaste = false;\n        this.isAlive = false;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.copySelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tiles = this.layoutProvider.copySelection();\n        if (tiles && tiles.length) {\n            /** @type {?} */\n            var event_1 = (/** @type {?} */ (new CustomEvent('DejaTilesCopied', { cancelable: true })));\n            event_1.tiles = tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            this.contentCopied.emit(event_1);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.cutSelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tiles = this.layoutProvider.cutSelection();\n        if (tiles && tiles.length) {\n            /** @type {?} */\n            var event_2 = (/** @type {?} */ (new CustomEvent('DejaTilesCutted', { cancelable: true })));\n            event_2.tiles = tiles.map((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            function (tile) { return tile.toTileModel(); }));\n            this.contentCopied.emit(event_2);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.deleteSelection = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tiles = this.layoutProvider.deleteSelection();\n        this.changeDetectorRef.markForCheck();\n        return tiles;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.paste = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tiles = this.layoutProvider.paste();\n        this.changeDetectorRef.markForCheck();\n        return tiles;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.ensureVisible = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        this.layoutProvider.ensureVisible$.next(id);\n    };\n    /**\n     * @param {?} tile\n     * @param {?} pixelHeight\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.expandTile = /**\n     * @param {?} tile\n     * @param {?} pixelHeight\n     * @return {?}\n     */\n    function (tile, pixelHeight) {\n        this.layoutProvider.expandTile(tile, pixelHeight);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.cancelExpand = /**\n     * @return {?}\n     */\n    function () {\n        this.layoutProvider.cancelExpand();\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.refresh = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        this.layoutProvider.refreshTiles$.next(params);\n    };\n    /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.addTiles = /**\n     * @param {?} tiles\n     * @return {?}\n     */\n    function (tiles) {\n        this.layoutProvider.addTiles(tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        function (tile) { return new DejaTile(tile); })));\n    };\n    /**\n     * @param {?} tileIds\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.removeTiles = /**\n     * @param {?} tileIds\n     * @return {?}\n     */\n    function (tileIds) {\n        this.layoutProvider.removeTiles(tileIds);\n    };\n    /**\n     * @param {?=} title\n     * @param {?=} bounds\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.addGroup = /**\n     * @param {?=} title\n     * @param {?=} bounds\n     * @return {?}\n     */\n    function (title, bounds) {\n        /** @type {?} */\n        var tile = (/** @type {?} */ ({\n            type: 'group',\n            bounds: bounds || this.getFreePlace(0, 0, 15, 5),\n            color: DejaTileGroupComponent.defaultColor,\n            templateModel: {\n                title: title || 'New Group',\n            },\n        }));\n        this.layoutProvider.createTiles([tile]);\n        return tile;\n    };\n    /**\n     * @param {?=} pageX\n     * @param {?=} pageY\n     * @param {?=} width\n     * @param {?=} height\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.getFreePlace = /**\n     * @param {?=} pageX\n     * @param {?=} pageY\n     * @param {?=} width\n     * @param {?=} height\n     * @return {?}\n     */\n    function (pageX, pageY, width, height) {\n        if (!this._models || this._models.length === 0) {\n            return new Rect(0, 0, width, height);\n        }\n        // Check if we drag on a tile\n        /** @type {?} */\n        var containerElement = (/** @type {?} */ (this.tilesContainer.nativeElement));\n        /** @type {?} */\n        var containerBounds = containerElement.getBoundingClientRect();\n        /** @type {?} */\n        var x = pageX ? (pageX - containerBounds.left) : 0;\n        /** @type {?} */\n        var y = pageY ? (pageY - containerBounds.top) : 0;\n        /** @type {?} */\n        var percentBounds = new Rect(this.layoutProvider.getPercentSize(x), this.layoutProvider.getPercentSize(y), width, height);\n        return this.layoutProvider.getFreePlace(percentBounds);\n    };\n    /**\n     * @param {?} id\n     * @param {?} bounds\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.moveTile = /**\n     * @param {?} id\n     * @param {?} bounds\n     * @return {?}\n     */\n    function (id, bounds) {\n        this.layoutProvider.moveTile(id, bounds);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.getDropContext = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return (/** @type {?} */ ({\n            dragEnter: (/**\n             * @param {?} dragContext\n             * @param {?} dragCursor\n             * @return {?}\n             */\n            function (dragContext, dragCursor) {\n                return _this.layoutProvider.dragEnter(dragContext, dragCursor) && (/** @type {?} */ ({\n                    className: 'hidden',\n                }));\n            }),\n            dragOver: (/**\n             * @param {?} _dragContext\n             * @param {?} dragCursor\n             * @return {?}\n             */\n            function (_dragContext, dragCursor) {\n                _this.layoutProvider.dragover$.next(dragCursor);\n            }),\n            dragLeave: (/**\n             * @param {?} _dragContext\n             * @return {?}\n             */\n            function (_dragContext) {\n                _this.layoutProvider.dragleave$.next();\n            }),\n        }));\n    };\n    /**\n     * @param {?} tile\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.onTileClosed = /**\n     * @param {?} tile\n     * @return {?}\n     */\n    function (tile) {\n        this.layoutProvider.removeTiles([tile.id]);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.onTileModelChanged = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var event = (/** @type {?} */ (new CustomEvent('DejaTilesModelEvent', { cancelable: false })));\n        event.tiles = this.layoutProvider.tiles.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) { return t.toTileModel(); }));\n        this.modelChanged.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.onFocus = /**\n     * @return {?}\n     */\n    function () {\n        this.hasFocus = true;\n    };\n    /**\n     * @return {?}\n     */\n    DejaTilesComponent.prototype.onBlur = /**\n     * @return {?}\n     */\n    function () {\n        this.hasFocus = false;\n    };\n    DejaTilesComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [DejaTilesLayoutProvider],\n                    selector: 'deja-tiles',\n                    template: \"<div #tilesContainer id=\\\"tiles\\\" [class.design]=\\\"designMode\\\" [deja-mouse-droppable]=\\\"getDropContext()\\\" [attr.tabindex]=\\\"tabIndex\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n    <deja-tile *ngFor=\\\"let tile of tiles; let index = index;\\\" [id]=\\\"tile.id\\\" [tile]=\\\"tile\\\" [designMode]=\\\"designMode\\\" [attr.tile-index]=\\\"index\\\" [template]=\\\"tileTemplate\\\" (close)=\\\"onTileClosed(tile)\\\" (modelChanged)=\\\"onTileModelChanged()\\\"></deja-tile>\\n    <div deja-tile-position [bounds]=\\\"selectionRect$ | async\\\"></div>\\n</div>\",\n                    styles: [\":host{position:relative;overflow:auto;margin:0!important}:host #tiles{display:block;left:0;top:0;width:100%;height:100%;position:absolute;padding:0!important;margin:0!important}:host #tiles #tile:hover{z-index:200}:host [deja-tile-position]{position:absolute;z-index:11;background-color:rgba(0,0,0,.25)}:host[drag]{background-color:rgba(0,0,0,.15)}:host[drag] [deja-tile-position]{transition-property:left,top,width,height;transition-duration:.35s;transition-timing-function:ease}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    DejaTilesComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: DejaTilesLayoutProvider },\n        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }\n    ]; };\n    DejaTilesComponent.propDecorators = {\n        selectionChanged: [{ type: Output }],\n        layoutChanged: [{ type: Output }],\n        layoutCompleted: [{ type: Output }],\n        contentAdding: [{ type: Output }],\n        contentRemoving: [{ type: Output }],\n        modelChanged: [{ type: Output }],\n        contentCopied: [{ type: Output }],\n        tabIndex: [{ type: Input }],\n        tileTemplate: [{ type: ContentChild, args: ['tileTemplate',] }],\n        tilesContainer: [{ type: ViewChild, args: ['tilesContainer',] }],\n        tileminwidth: [{ type: Input }],\n        tilemaxwidth: [{ type: Input }],\n        tileminheight: [{ type: Input }],\n        tilemaxheight: [{ type: Input }],\n        maxwidth: [{ type: Input }],\n        designMode: [{ type: Input }],\n        models: [{ type: Input }],\n        canDelete: [{ type: Input }],\n        canCopy: [{ type: Input }],\n        canCut: [{ type: Input }],\n        canPaste: [{ type: Input }],\n        selectedTiles: [{ type: Input }]\n    };\n    return DejaTilesComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTilesModule = /** @class */ (function () {\n    function DejaTilesModule() {\n    }\n    DejaTilesModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DejaTileComponent, DejaTilesComponent, DejaTileGroupComponent, DejaTilePositionDirective],\n                    exports: [DejaTileComponent, DejaTilesComponent, DejaTileGroupComponent],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        MatProgressSpinnerModule,\n                        MatIconModule,\n                        DejaMouseDragDropModule,\n                        DejaEditableModule,\n                    ],\n                    providers: [\n                        DejaMouseDragDropService,\n                    ]\n                },] }\n    ];\n    return DejaTilesModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DejaTilesModule, DejaTileGroupComponent, DejaTile, DejaTileComponent, DejaTilePositionDirective, DejaTilesLayoutProvider, DejaTilesComponent };\n\n//# sourceMappingURL=deja-js-component-tiles.js.map","module.exports = \"<mat-tab-group [selectedIndex]=\\\"tabIndex\\\" (selectedTabChange)=\\\"tabIndex = $event.index\\\">\\n    <!--<mat-tab label=\\\"OVERVIEW\\\">-->\\n    <!--<mat-card class=\\\"demo-card demo-basic\\\">-->\\n    <!--TODO-->\\n    <!--</mat-card>-->\\n    <!--</mat-tab>-->\\n    <mat-tab label=\\\"API REFERENCE\\\"></mat-tab>\\n    <mat-tab label=\\\"EXAMPLES\\\"></mat-tab>\\n</mat-tab-group>\\n\\n<mat-card class=\\\"demo-card demo-basic\\\" *ngIf=\\\"tabIndex === 0\\\">\\n    <deja-markdown [url]=\\\"'https://raw.githubusercontent.com/DSI-HUG/dejajs-components/dev/projects/deja-js/component/tiles/readme.txt'\\\"></deja-markdown>\\n</mat-card>\\n\\n<ng-template ngFor let-message [ngForOf]=\\\"messages$ | async\\\">\\n    <deja-snackbar alignment=\\\"bottom right\\\" *ngIf=\\\"message.gate\\\" [duration]=\\\"8000\\\" (onAnimationDone)=\\\"message.cancel(false)\\\">\\n        <deja-message-box type=\\\"{{message.type}}\\\" title=\\\"{{message.title}}\\\">\\n            {{message.content}}\\n            <ng-template #actionsTemplate>\\n                <button mat-raised-button (click)=\\\"message.cancel(false)\\\" color=\\\"primary\\\">\\n                    Ok\\n                </button>\\n                <button mat-raised-button (click)=\\\"message.cancel(true)\\\">\\n                    Annuler\\n                </button>\\n            </ng-template>\\n        </deja-message-box>\\n    </deja-snackbar>\\n</ng-template>\\n<mat-card class=\\\"demo-card demo-basic\\\" *ngIf=\\\"tabIndex === 1\\\">\\n    <mat-toolbar color=\\\"primary\\\">Tiles Demo</mat-toolbar>\\n    <mat-card-content id=\\\"actions\\\">\\n        <mat-checkbox [(ngModel)]=\\\"designMode\\\">Design Mode</mat-checkbox>\\n        <button mat-raised-button (click)=\\\"tiles2.addGroup()\\\" color=\\\"primary\\\">\\n            Add Group\\n        </button>\\n    </mat-card-content>\\n    <mat-card-content>\\n        <span #dropArea id=\\\"droparea\\\" [deja-mouse-droppable]=\\\"getDropContext(dropArea)\\\">\\n            Drop Area\\n        </span>\\n    </mat-card-content>\\n    <mat-card-content>\\n        <deja-tiles #tiles1 id=\\\"tiles1\\\" [models]=\\\"tiles1$ | async\\\" [deja-mouse-draggable]=\\\"getDragContext()\\\" (contentAdding)=\\\"onContentAdding($event)\\\" (contentRemoving)=\\\"onContentRemoving($event)\\\" maxwidth=\\\"100%\\\" tileminwidth=\\\"5%\\\" tileminheight=\\\"5%\\\" tilemaxheight=\\\"50%\\\" tilemaxwidth=\\\"50%\\\">\\n            <ng-template #tileTemplate let-tile let-pressed=\\\"pressed\\\" let-selected=\\\"selected\\\">\\n                <span class=\\\"tile-content noselect\\\" [style.background-color]=\\\"tile.templateModel.color\\\">{{ tile.templateModel.naqme }} ({{ tile.id }})\\n                    <span id=\\\"selected\\\">Selected</span>\\n                <span id=\\\"pressed\\\">Pressed</span>\\n                </span>\\n            </ng-template>\\n        </deja-tiles>\\n    </mat-card-content>\\n    <mat-card-content>\\n        <deja-tiles #tiles2 id=\\\"tiles2\\\" [models]=\\\"tiles2$ | async\\\" (contentAdding)=\\\"onContentAdding($event)\\\" (contentRemoving)=\\\"onContentRemoving($event)\\\" canDelete canCopy canCut canPaste [designMode]=\\\"designMode\\\" maxwidth=\\\"100%\\\" tileminwidth=\\\"5%\\\" tileminheight=\\\"5%\\\" tilemaxheight=\\\"50%\\\" tilemaxwidth=\\\"50%\\\">\\n            <ng-template #tileTemplate let-tile let-pressed=\\\"pressed\\\" let-selected=\\\"selected\\\">\\n                <span class=\\\"tile-content noselect\\\" [style.background-color]=\\\"tile.templateModel.color\\\">{{ tile.templateModel.naqme }} ({{ tile.id }})\\n                    <span id=\\\"selected\\\">Selected</span>\\n                <span id=\\\"pressed\\\">Pressed</span>\\n                </span>\\n            </ng-template>\\n        </deja-tiles>\\n    </mat-card-content>\\n</mat-card>\\n\\n<deja-mouse-dragdrop-cursor></deja-mouse-dragdrop-cursor>\"","/*\n *  @license\n *  Copyright Hôpitaux Universitaires de Genève. All Rights Reserved.\n *\n *  Use of this source code is governed by an Apache-2.0 license that can be\n *  found in the LICENSE file at https://github.com/DSI-HUG/dejajs-components/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCheckboxModule, MatTabsModule } from '@angular/material';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { DejaMessageBoxModule } from '@deja-js/component/message-box';\nimport { DejaMouseDragDropModule } from '@deja-js/component/mouse-dragdrop';\nimport { DejaSnackbarModule } from '@deja-js/component/snackbar';\nimport { DejaTilesModule } from '@deja-js/component/tiles';\nimport { DejaMarkdownModule } from '../../component/markdown/index';\nimport { DejaTilesDemoComponent } from './tiles-demo';\nimport { routing } from './tiles-demo.routes';\n\n@NgModule({\n    declarations: [DejaTilesDemoComponent],\n    exports: [DejaTilesDemoComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatCardModule,\n        MatTabsModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        DejaTilesModule,\n        DejaMarkdownModule,\n        DejaSnackbarModule,\n        DejaMouseDragDropModule,\n        DejaMessageBoxModule,\n        routing,\n    ],\n    providers: [\n    ],\n})\nexport class DejaTilesDemoModule { }\n","/*\n *  @license\n *  Copyright Hôpitaux Universitaires de Genève. All Rights Reserved.\n *\n *  Use of this source code is governed by an Apache-2.0 license that can be\n *  found in the LICENSE file at https://github.com/DSI-HUG/dejajs-components/blob/master/LICENSE\n */\n\nimport { ModuleWithProviders } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DejaTilesDemoComponent } from './tiles-demo';\n\nconst routes: Routes = [\n    { path: '', component: DejaTilesDemoComponent },\n    { path: '**', redirectTo: '', pathMatch: 'full' },\n];\n\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\n","module.exports = \"deja-tiles-demo .demo-basic {\\n  padding: 0; }\\n\\ndeja-tiles-demo .demo-full-width {\\n  width: 100%; }\\n\\ndeja-tiles-demo .demo-icons {\\n  font-size: 100%;\\n  height: inherit;\\n  vertical-align: top;\\n  width: inherit; }\\n\\ndeja-tiles-demo .demo-card {\\n  margin: 16px; }\\n\\ndeja-tiles-demo .demo-card mat-card-content {\\n    display: flex;\\n    flex-direction: column;\\n    margin: 2rem; }\\n\\ndeja-tiles-demo #actions {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\ndeja-tiles-demo #droparea {\\n  height: 5rem;\\n  background-color: #f57c00;\\n  width: 50%;\\n  display: block; }\\n\\ndeja-tiles-demo #tiles1 {\\n  height: 370px;\\n  display: block; }\\n\\ndeja-tiles-demo #tiles2 {\\n  height: 1000px;\\n  display: block; }\\n\\ndeja-tiles-demo deja-tile #selected {\\n  display: none; }\\n\\ndeja-tiles-demo deja-tile #pressed {\\n  display: none; }\\n\\ndeja-tiles-demo deja-tile[selected] #selected {\\n  display: block; }\\n\\ndeja-tiles-demo deja-tile[pressed] #pressed {\\n  display: block; }\\n\\ndeja-tiles-demo deja-tile .tile-content {\\n  width: 100%;\\n  height: 100%;\\n  display: block; }\\n\\n@media screen and (min-width: 1401px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 100%; } }\\n\\n@media screen and (max-width: 1400px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 90%; } }\\n\\n@media screen and (max-width: 1200px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 85%; } }\\n\\n@media screen and (max-width: 768px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 80%; } }\\n\\n@media screen and (max-width: 640px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 70%; } }\\n\\n@media screen and (max-width: 320px) {\\n  deja-tiles-demo deja-tiles {\\n    font-size: 60%; } }\\n\\n.deja-tile-cursor .tile-content {\\n  width: 100%;\\n  height: 100%;\\n  display: block;\\n  opacity: 0.8; }\\n\\n.country-target-cursor .tile-content {\\n  background-color: sandybrown !important;\\n  width: 100%;\\n  height: 100%;\\n  display: block;\\n  opacity: 0.8; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RyYXZpcy9idWlsZC9EU0ktSFVHL2RlamFqcy1jb21wb25lbnRzL3NyYy9hcHAvdGlsZXMvdGlsZXMtZGVtby5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsVUFBVSxFQUFBOztBQUZaO0VBS0UsV0FBVyxFQUFBOztBQUxiO0VBUUUsZUFBZTtFQUNmLGVBQWU7RUFDZixtQkFBbUI7RUFDbkIsY0FBYyxFQUFBOztBQVhoQjtFQWNFLFlBQVksRUFBQTs7QUFkZDtJQWdCRyxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFlBQVksRUFBQTs7QUFsQmY7RUFzQkUsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsOEJBQThCLEVBQUE7O0FBekJoQztFQTRCRSxZQUFZO0VBQ1oseUJBQWtDO0VBQzVCLFVBQVU7RUFDVixjQUFjLEVBQUE7O0FBL0J0QjtFQWtDRSxhQUFhO0VBQ2IsY0FBYyxFQUFBOztBQW5DaEI7RUFzQ0UsY0FBYztFQUNkLGNBQWMsRUFBQTs7QUF2Q2hCO0VBMkNHLGFBQWEsRUFBQTs7QUEzQ2hCO0VBOENHLGFBQWEsRUFBQTs7QUE5Q2hCO0VBa0RJLGNBQWMsRUFBQTs7QUFsRGxCO0VBdURJLGNBQWMsRUFBQTs7QUF2RGxCO0VBMkRHLFdBQVc7RUFDWCxZQUFZO0VBQ1osY0FBYyxFQUFBOztBQUloQjtFQWpFRDtJQW1FRyxlQUFlLEVBQUEsRUFDZjs7QUFFRjtFQXRFRDtJQXdFRyxjQUFjLEVBQUEsRUFDZDs7QUFFRjtFQTNFRDtJQTZFRyxjQUFjLEVBQUEsRUFDZDs7QUFFRjtFQWhGRDtJQWtGRyxjQUFjLEVBQUEsRUFDZDs7QUFFRjtFQXJGRDtJQXVGRyxjQUFjLEVBQUEsRUFDZDs7QUFFRjtFQTFGRDtJQTRGRyxjQUFjLEVBQUEsRUFDZDs7QUFJSDtFQUVFLFdBQVc7RUFDWCxZQUFZO0VBQ1osY0FBYztFQUNkLFlBQVksRUFBQTs7QUFJZDtFQUVFLHVDQUF1QztFQUN2QyxXQUFXO0VBQ1gsWUFBWTtFQUNaLGNBQWM7RUFDZCxZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC90aWxlcy90aWxlcy1kZW1vLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkZWphLXRpbGVzLWRlbW8ge1xuXHQuZGVtby1iYXNpYyB7XG5cdFx0cGFkZGluZzogMDtcblx0fVxuXHQuZGVtby1mdWxsLXdpZHRoIHtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuXHQuZGVtby1pY29ucyB7XG5cdFx0Zm9udC1zaXplOiAxMDAlO1xuXHRcdGhlaWdodDogaW5oZXJpdDtcblx0XHR2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuXHRcdHdpZHRoOiBpbmhlcml0O1xuXHR9XG5cdC5kZW1vLWNhcmQge1xuXHRcdG1hcmdpbjogMTZweDtcblx0XHRtYXQtY2FyZC1jb250ZW50IHtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0bWFyZ2luOiAycmVtO1xuXHRcdH1cblx0fVxuXHQjYWN0aW9ucyB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHR9XG5cdCNkcm9wYXJlYSB7XG5cdFx0aGVpZ2h0OiA1cmVtO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHJnYigyNDUsIDEyNCwgMCk7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuXHR9XG5cdCN0aWxlczEge1xuXHRcdGhlaWdodDogMzcwcHg7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdH1cblx0I3RpbGVzMiB7XG5cdFx0aGVpZ2h0OiAxMDAwcHg7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdH1cblx0ZGVqYS10aWxlIHtcblx0XHQjc2VsZWN0ZWQge1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHR9XG5cdFx0I3ByZXNzZWQge1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHR9XG5cdFx0JltzZWxlY3RlZF0ge1xuXHRcdFx0I3NlbGVjdGVkIHtcblx0XHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdCZbcHJlc3NlZF0ge1xuXHRcdFx0I3ByZXNzZWQge1xuXHRcdFx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRcdH1cblx0XHR9XG5cdFx0LnRpbGUtY29udGVudCB7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdH1cblx0fVxuXG5cdEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDFweCkge1xuXHRcdGRlamEtdGlsZXMge1xuXHRcdFx0Zm9udC1zaXplOiAxMDAlO1xuXHRcdH1cblx0fVxuXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNDAwcHgpIHtcblx0XHRkZWphLXRpbGVzIHtcblx0XHRcdGZvbnQtc2l6ZTogOTAlO1xuXHRcdH1cblx0fVxuXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcblx0XHRkZWphLXRpbGVzIHtcblx0XHRcdGZvbnQtc2l6ZTogODUlO1xuXHRcdH1cblx0fVxuXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuXHRcdGRlamEtdGlsZXMge1xuXHRcdFx0Zm9udC1zaXplOiA4MCU7XG5cdFx0fVxuXHR9XG5cdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY0MHB4KSB7XG5cdFx0ZGVqYS10aWxlcyB7XG5cdFx0XHRmb250LXNpemU6IDcwJTtcblx0XHR9XG5cdH1cblx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcblx0XHRkZWphLXRpbGVzIHtcblx0XHRcdGZvbnQtc2l6ZTogNjAlO1xuXHRcdH1cblx0fVxufVxuXG4uZGVqYS10aWxlLWN1cnNvciB7XG5cdC50aWxlLWNvbnRlbnQge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvcGFjaXR5OiAwLjg7XG5cdH1cbn1cblxuLmNvdW50cnktdGFyZ2V0LWN1cnNvciB7XG5cdC50aWxlLWNvbnRlbnQge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHNhbmR5YnJvd24gIWltcG9ydGFudDtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0b3BhY2l0eTogMC44O1xuXHR9XG59Il19 */\"","/*\n *  @license\n *  Copyright Hôpitaux Universitaires de Genève. All Rights Reserved.\n *\n *  Use of this source code is governed by an Apache-2.0 license that can be\n *  found in the LICENSE file at https://github.com/DSI-HUG/dejajs-components/blob/master/LICENSE\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { IDropCursorInfos } from '@deja-js/component';\nimport { IDejaMouseDraggableContext } from '@deja-js/component';\nimport { IDejaMouseDroppableContext } from '@deja-js/component';\nimport { IDejaTile, IDejaTilesAddEvent, IDejaTilesRemoveEvent } from '@deja-js/component/tiles';\nimport { Rect } from '@deja-js/core';\nimport { from as observableFrom,  Observable ,  Subject } from 'rxjs';\nimport { defaultIfEmpty, map, reduce, scan, switchMap, take } from 'rxjs/operators';\nimport { CountriesService, Country } from '../services/countries.service';\n\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    selector: 'deja-tiles-demo',\n    styleUrls: ['./tiles-demo.scss'],\n    templateUrl: './tiles-demo.html',\n})\nexport class DejaTilesDemoComponent implements OnInit {\n    public tabIndex = 1;\n    public messages$: Observable<IMessage[]>;\n    public tiles1$: Observable<IDejaTile[]>;\n    public tiles2$: Observable<IDejaTile[]>;\n    public designMode = false;\n\n    private message$ = new Subject<IMessage>();\n\n    constructor(private countriesService: CountriesService) {\n        this.messages$ = observableFrom(this.message$).pipe(\n            scan((acc: any[], curr: any) => [...acc, curr], []),\n            defaultIfEmpty([]), );\n    }\n\n    public ngOnInit() {\n        let x1 = 0;\n        let y1 = 0;\n        let x2 = 0;\n        let y2 = 0;\n\n        const tiles$ = this.countriesService.getCountries$().pipe(\n            switchMap((countries) => countries));\n\n        this.tiles1$ = tiles$.pipe(\n            take(12),\n            map((country) => {\n                const tile = {\n                    bounds: new Rect(x1, y1, 15, 15),\n                    id: country.code,\n                    templateModel: country,\n                } as IDejaTile;\n\n                x1 += 15;\n                if (x1 + 15 > 100) {\n                    x1 = 0;\n                    y1 += 15;\n                }\n\n                return tile;\n            }),\n            reduce((acc: IDejaTile[], cur: IDejaTile) => [...acc, cur], []));\n\n        this.tiles2$ = tiles$.pipe(\n            map((country) => {\n                const tile = {\n                    bounds: new Rect(x2, y2, 15, 15),\n                    id: country.code,\n                    templateModel: country,\n                } as IDejaTile;\n\n                x2 += 15;\n                if (x2 + 15 > 100) {\n                    x2 = 0;\n                    y2 += 15;\n                }\n\n                return tile;\n            }),\n            reduce((acc: IDejaTile[], cur: IDejaTile) => [...acc, cur], []));\n    }\n\n    protected getDragContext() {\n        return {\n            target: 'deja-tile',\n            className: 'deja-tile-cursor',\n            dragStart: (target) => {\n                return this.countriesService.getCountryByCode$(target.id).pipe(\n                    map((country) => {\n                        return {\n                            country: country,\n                            IDejaTile: {\n                                id: country.code,\n                                type: country.displayName,\n                                bounds: new Rect(0, 0, 15, 15),\n                                templateModel: country,\n                            } as IDejaTile,\n                        };\n                    }));\n            },\n        } as IDejaMouseDraggableContext;\n    }\n\n    protected getDropContext(dropArea: HTMLElement) {\n        return {\n            dragEnter: (_dragContext) => {\n                return {\n                    width: 200,\n                    height: 60,\n                    className: 'country-target-cursor',\n                } as IDropCursorInfos;\n            },\n            drop: (dragContext) => {\n                const country = dragContext.country as Country;\n                dropArea.innerText = `The dropped country is ${country.naqme} - the code is: ${country.code}`;\n            },\n        } as IDejaMouseDroppableContext;\n    }\n\n    protected onContentAdding(event: IDejaTilesAddEvent) {\n        this.message$.next({\n            title: 'Tiles added',\n            content: `${event.added.length} tiles added.`,\n            type: 'warn',\n            gate: true,\n            cancel: function (value: boolean) {\n                this.gate = false;\n                event.cancel$.next(value);\n            },\n        } as IMessage);\n\n        // Wait for message box validating the added tiles\n        event.preventDefault();\n    }\n\n    protected onContentRemoving(event: IDejaTilesRemoveEvent) {\n        this.message$.next({\n            title: 'Tiles deleted',\n            content: `${event.removed.length} tiles deleted.`,\n            type: 'warn',\n            gate: true,\n            cancel: function (value: boolean) {\n                this.gate = false;\n                event.cancel$.next(value);\n            },\n        } as IMessage);\n\n        // Wait for message box answer before destruction of the tiles\n        event.preventDefault();\n    }\n}\n\ninterface IMessage {\n    content: string;\n    title: string;\n    type: string;\n    gate: boolean;\n    cancel(): {};\n}\n"],"sourceRoot":""}