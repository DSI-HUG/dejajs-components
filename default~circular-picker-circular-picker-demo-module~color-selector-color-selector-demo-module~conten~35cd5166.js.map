{"version":3,"sources":["webpack:///./dist/deja-js/component/fesm5/deja-js-component-dragdrop.js","webpack:///./dist/deja-js/component/fesm5/deja-js-component-loaders.js","webpack:///./dist/deja-js/component/fesm5/deja-js-component-tree-list.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACgC;AACnC;AACX;AAC0B;;AAE1E;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC,QAAQ,sDAAS,4BAA4B,gEAAS;AACtD,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE,IAAI,6DAAM;AACvD,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,OAAO;AACjD,mCAAmC,kDAAI;AACvC;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAS,0BAA0B,gEAAS;AACxD,wBAAwB;AACxB;AACA,yBAAyB,sBAAsB,EAAE,IAAI,4DAAK;AAC1D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,+CAA+C,EAAE;AACjD,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,kEAAoB,gBAAgB,OAAO,sDAAQ,EAAE;AACrE,MAAM;AACN;AACA,qBAAqB,OAAO,yDAAW,6BAA6B;AACpE,sBAAsB,OAAO,yDAAW,8BAA8B;AACtE,mBAAmB,OAAO,mDAAK,6BAA6B;AAC5D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC,mBAAmB,EAAE;AACrB,4BAA4B,4CAAO;AACnC,mBAAmB,EAAE;AACrB,wBAAwB,4CAAO;AAC/B,mBAAmB,EAAE;AACrB,uBAAuB,iDAAI,aAAa,0DAAG;AAC3C,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE,IAAI,6DAAM;AACxD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,eAAe,EAAE;AAC3C,QAAQ,iDAAI,iBAAiB,gEAAS;AACtC,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,kDAAkD,EAAE;AACpD,+BAA+B,EAAE;AACjC,wCAAwC,EAAE;AAC1C;AACA,gDAAgD,EAAE;AAClD;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAS,uBAAuB,gEAAS;AAC7D;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,oBAAoB,sDAAS,2BAA2B,gEAAS;AACjE;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,8DAA8D,mBAAmB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,sDAAS,4BAA4B,gEAAS;AACtD,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE,IAAI,6DAAM;AACvD,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE,IAAI,6DAAM;AACzD,oBAAoB;AACpB;AACA,qBAAqB,wDAAwD,EAAE;AAC/E;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,sDAAS,4BAA4B,gEAAS;AACtD,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE,IAAI,6DAAM;AACvD,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE,IAAI,6DAAM;AACzD,oBAAoB;AACpB;AACA,qBAAqB,wDAAwD,EAAE;AAC/E;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8BAA8B,mFAAqB;AACnD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AAC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A,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,+BAA+B,mFAAqB;AACpD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,iCAAiC,mFAAqB;AACtD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mCAAmC,mFAAqB;AACxD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,kFAAoB;AACjD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uDAAuD,mFAAqB;AAC5E,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,8DAA8D,iEAAS;AACvE,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+CAAE;AAC7B;AACA;AACA,sDAAsD,2DAAG;AACzD,gCAAgC;AAChC;AACA,iCAAiC,aAAa,EAAE;AAChD;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,+DAA+D,6DAAK,IAAI,iEAAS;AACjF,wBAAwB;AACxB;AACA,yBAAyB,8BAA8B,EAAE;AACzD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,2BAA2B,mFAAqB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,sEAAsE,iEAAS;AAC/E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,mCAAmC,6DAAK,IAAI,2DAAG;AACzE,oBAAoB;AACpB;AACA,qBAAqB,cAAc,EAAE,IAAI,EAAE;AAC3C;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,wCAAwC,6DAAK;AAC7C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,+CAA+C,EAAE;AACjD;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAK,SAAS,6DAAK,IAAI,iEAAS;AAC5C,wBAAwB;AACxB;AACA,yBAAyB,8BAA8B,EAAE;AACzD;AACA;AACA,QAAQ,sDAAS,kCAAkC,iEAAS;AAC5D,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE,IAAI,2DAAG;AACrD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,iEAAiE,EAAE,IAAI,2DAAG;AACpG,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,qBAAqB,oDAAM;AAC3B,uBAAuB,EAAE;AACzB,gCAAgC,EAAE;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE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;AACxD,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE,IAAI,2DAAG;AACtD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,8DAAM;AACnB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wDAAwD,EAAE,KAAK,sDAAQ;AACvE,8BAA8B,sDAAQ;AACtC,4BAA4B,sDAAQ;AACpC,4BAA4B,sDAAQ;AACpC,4BAA4B,sDAAQ;AACpC,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gCAAgC,6DAAK;AAC1D;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,yEAAyE,6DAAK;AAC9E;AACA,4BAA4B;AAC5B;AACA,6BAA6B,+CAA+C,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6DAAK;AAC9C,4BAA4B;AAC5B;AACA;AACA;AACA,2DAA2D,6DAAK;AAChE;AACA,gCAAgC;AAChC;AACA,iCAAiC,+CAA+C,EAAE;AAClF,iBAAiB;AACjB;AACA;AACA,2BAA2B,sDAAS,mCAAmC,6DAAK,IAAI,8DAAM;AACtF,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uCAAuC,EAAE;AACzC,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2CAA2C,EAAE;AAC7C,yEAAyE,6DAAK;AAC9E,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yEAAyE,6DAAK;AAC9E;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,+BAA+B,EAAE;AACjC,wIAAwI,iEAAS;AACjJ,gCAAgC;AAChC;AACA,iCAAiC,4CAA4C,EAAE;AAC/E,2BAA2B,6DAAK;AAChC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,2CAA2C,6DAAK,oBAAoB;AACpE,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B,gFAAgF,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4EAA4E,EAAE;AAC9E;AACA;AACA;AACA;AACA,8EAA8E,iEAAS;AACvF,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,sDAAsD,6DAAK,IAAI,2DAAG;AAClE,gCAAgC;AAChC;AACA,iCAAiC,oBAAoB,EAAE;AACvD;AACA;AACA,2BAA2B,+CAAE;AAC7B;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,mCAAmC,iEAAS;AAC5C,4BAA4B;AAC5B;AACA,6BAA6B,mCAAmC,6DAAK,IAAI,EAAE;AAC3E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yBAAyB,kDAAI;AAC7B,0CAA0C,sDAAQ;AAClD;AACA,sCAAsC,6DAAK;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,8BAA8B,0BAA0B,EAAE;AAC1D;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC,4DAA4D,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"default~circular-picker-circular-picker-demo-module~color-selector-color-selector-demo-module~conten~35cd5166.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, HostBinding, Input, Optional, NgModule } from '@angular/core';\nimport { DejaClipboardService, UUID } from '@deja-js/core';\nimport { fromEvent, from, Subject } from 'rxjs';\nimport { filter, first, takeWhile, takeUntil, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaDraggableDirective = /** @class */ (function () {\n    function DejaDraggableDirective(elementRef, clipboardService) {\n        var _this = this;\n        this.clipboardService = clipboardService;\n        this.draggable = null;\n        this.draginfokey = 'draginfos';\n        this.objectKey = 'object';\n        this.elementKey = 'element';\n        this.uuidKey = 'uuid';\n        this.isAlive = true;\n        /** @type {?} */\n        var element = (/** @type {?} */ (elementRef.nativeElement));\n        fromEvent(element, 'dragstart').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return !!_this.context; })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!clipboardService) {\n                throw new Error('To use the DejaDraggableDirective, please import and provide the DejaClipboardService in your application.');\n            }\n            // console.log('dragstart');\n            /** @type {?} */\n            var dragInfos = (/** @type {?} */ ({}));\n            _this.dragdropid = new UUID().toString();\n            dragInfos[_this.uuidKey] = _this.dragdropid;\n            /** @type {?} */\n            var object = (_this.context && _this.context.object) || element;\n            dragInfos[_this.objectKey] = object;\n            dragInfos[_this.elementKey] = element;\n            _this.clipboardService.set(_this.draginfokey, dragInfos);\n            /** @type {?} */\n            var data = 'notavailable';\n            if (object) {\n                object.dragged = true;\n                data = JSON.stringify(data);\n            }\n            if (_this.context && _this.context.dragstartcallback) {\n                /** @type {?} */\n                var e = (/** @type {?} */ (event));\n                e.dragInfo = dragInfos;\n                e.dragObject = _this.context.object;\n                e.dragElement = element;\n                _this.context.dragstartcallback(e);\n                event.dataTransfer.setData('text/plain', data);\n                if (e.defaultPrevented) {\n                    event.preventDefault();\n                }\n            }\n            fromEvent(element, 'dragend').pipe(takeWhile((/**\n             * @return {?}\n             */\n            function () { return _this.isAlive; })), first())\n                .subscribe((/**\n             * @param {?} evt\n             * @return {?}\n             */\n            function (evt) {\n                // console.log('dragend');\n                /** @type {?} */\n                var dragEndInfos = (/** @type {?} */ (_this.clipboardService.get(_this.draginfokey)));\n                /** @type {?} */\n                var obj = dragEndInfos && dragEndInfos[_this.objectKey];\n                if (obj) {\n                    delete obj.dragged;\n                }\n                if (_this.context && _this.context.dragendcallback && dragEndInfos) {\n                    /** @type {?} */\n                    var e = (/** @type {?} */ (evt));\n                    e.dragInfo = dragEndInfos;\n                    e.dragObject = obj;\n                    e.dragElement = dragEndInfos[_this.elementKey];\n                    _this.context.dragendcallback(e);\n                    if (e.defaultPrevented) {\n                        evt.stopPropagation();\n                    }\n                }\n                _this.clipboardService.clear();\n                _this.dragdropid = undefined;\n            }));\n        }));\n    }\n    Object.defineProperty(DejaDraggableDirective.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._context;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._context = value;\n            this.draggable = !!value ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaDraggableDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.isAlive = false;\n    };\n    DejaDraggableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[deja-draggable]',\n                },] }\n    ];\n    /** @nocollapse */\n    DejaDraggableDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DejaClipboardService, decorators: [{ type: Optional }] }\n    ]; };\n    DejaDraggableDirective.propDecorators = {\n        draggable: [{ type: HostBinding, args: ['attr.draggable',] }],\n        dragdropid: [{ type: HostBinding, args: ['attr.dragdropid',] }],\n        context: [{ type: Input, args: ['deja-draggable',] }]\n    };\n    return DejaDraggableDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaDroppableDirective = /** @class */ (function () {\n    function DejaDroppableDirective(elementRef, clipboardService) {\n        var _this = this;\n        this.clipboardService = clipboardService;\n        this.droppable = null;\n        this.draginfokey = 'draginfos';\n        this.objectKey = 'object';\n        this.droppedKey = 'dropped';\n        this.elementKey = 'element';\n        this._allEvents = false;\n        this.isAlive = true;\n        /** @type {?} */\n        var inDrag = false;\n        /** @type {?} */\n        var element = (/** @type {?} */ (elementRef.nativeElement));\n        /** @type {?} */\n        var dragDrop$ = new Subject();\n        /** @type {?} */\n        var kill$ = new Subject();\n        /** @type {?} */\n        var dragEnd$ = from(kill$).pipe(tap((/**\n         * @return {?}\n         */\n        function () { return inDrag = false; })), filter((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { return !value; })));\n        from(dragDrop$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })))\n            .subscribe((/**\n         * @param {?} dragEvent\n         * @return {?}\n         */\n        function (dragEvent) {\n            if (dragEvent.type === 'dragenter') {\n                if (inDrag) {\n                    return;\n                }\n                inDrag = true;\n                // console.log('DejaDragEnter');\n                if (_this.context.dragentercallback) {\n                    /** @type {?} */\n                    var dragInfos_1 = (/** @type {?} */ (_this.clipboardService.get(_this.draginfokey)));\n                    /** @type {?} */\n                    var e = (/** @type {?} */ (dragEvent));\n                    e.dragInfo = dragInfos_1;\n                    e.dragObject = ((/** @type {?} */ (dragEvent)))[_this.objectKey];\n                    e.dragElement = element;\n                    e.itsMe = ((/** @type {?} */ (dragEvent)))[_this.elementKey] === element;\n                    _this.context.dragentercallback(e);\n                    if (e.defaultPrevented) {\n                        dragEvent.preventDefault();\n                        dragEvent.dataTransfer.dropEffect = 'copy';\n                    }\n                    else {\n                        dragEvent.dataTransfer.dropEffect = 'none';\n                    }\n                    fromEvent(element, 'drop').pipe(takeUntil(dragEnd$))\n                        .subscribe((/**\n                     * @param {?} dropEvent\n                     * @return {?}\n                     */\n                    function (dropEvent) {\n                        // console.log('DejaDrop');\n                        if (_this.context.dropcallback) {\n                            if (dragInfos_1) {\n                                /** @type {?} */\n                                var evt = (/** @type {?} */ (dropEvent));\n                                evt.dragInfo = dragInfos_1;\n                                evt.dragObject = dragInfos_1[_this.objectKey];\n                                evt.dragElement = element;\n                                evt.itsMe = dragInfos_1[_this.elementKey] === element;\n                                _this.context.dropcallback(evt);\n                                if (evt.defaultPrevented) {\n                                    evt.dragInfo[_this.droppedKey] = true;\n                                    dropEvent.preventDefault();\n                                    dragEvent.dataTransfer.dropEffect = 'copy';\n                                }\n                                else {\n                                    dragEvent.dataTransfer.dropEffect = 'none';\n                                }\n                            }\n                        }\n                        kill$.next();\n                        return;\n                    }));\n                    fromEvent(element, 'dragover').pipe(takeUntil(dragEnd$))\n                        .subscribe((/**\n                     * @param {?} overEvent\n                     * @return {?}\n                     */\n                    function (overEvent) {\n                        // console.log('DejaDragOver');\n                        if (!_this._allEvents && _this.lastTarget && _this.lastTarget === overEvent.target) {\n                            if (_this.lastAccept) {\n                                overEvent.preventDefault();\n                                dragEvent.dataTransfer.dropEffect = 'copy';\n                            }\n                            else {\n                                dragEvent.dataTransfer.dropEffect = 'none';\n                            }\n                            return;\n                        }\n                        if (_this.context.dragovercallback) {\n                            if (dragInfos_1) {\n                                /** @type {?} */\n                                var evt = (/** @type {?} */ (overEvent));\n                                evt.dragInfo = dragInfos_1;\n                                evt.dragObject = dragInfos_1[_this.objectKey];\n                                evt.dragElement = element;\n                                evt.itsMe = dragInfos_1[_this.elementKey] === element;\n                                _this.context.dragovercallback(evt);\n                                _this.lastTarget = overEvent.target;\n                                _this.lastAccept = evt.defaultPrevented;\n                                if (evt.defaultPrevented) {\n                                    overEvent.preventDefault();\n                                    dragEvent.dataTransfer.dropEffect = 'copy';\n                                }\n                                else {\n                                    dragEvent.dataTransfer.dropEffect = 'none';\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            else {\n                // console.log('DejaDragLeave');\n                if (_this.context.dragleavecallback) {\n                    /** @type {?} */\n                    var e = new CustomEvent('DejaDragLeave', { cancelable: true });\n                    _this.context.dragleavecallback(e);\n                    if (e.defaultPrevented) {\n                        dragEvent.preventDefault();\n                    }\n                }\n                kill$.next();\n            }\n        }));\n        fromEvent(element, 'dragenter').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return !!_this.context; })), filter((/**\n         * @return {?}\n         */\n        function () { return !!_this.clipboardService.get(_this.draginfokey); })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!clipboardService) {\n                throw new Error('To use the DejaDroppableDirective, please import and provide the DejaClipboardService in your application.');\n            }\n            dragDrop$.next(event);\n        }));\n        fromEvent(element, 'dragleave').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this.isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return !!_this.context; })), filter((/**\n         * @return {?}\n         */\n        function () { return !!_this.clipboardService.get(_this.draginfokey); })))\n            .subscribe((/**\n         * @param {?} leaveEvent\n         * @return {?}\n         */\n        function (leaveEvent) {\n            // console.log('dragleave ' + (leaveEvent.target as HTMLElement).tagName);\n            /** @type {?} */\n            var bounds = element.getBoundingClientRect();\n            /** @type {?} */\n            var inside = leaveEvent.x >= bounds.left && leaveEvent.x <= bounds.right && leaveEvent.y >= bounds.top && leaveEvent.y <= bounds.bottom;\n            if (!inside) {\n                dragDrop$.next(leaveEvent);\n            }\n        }));\n    }\n    Object.defineProperty(DejaDroppableDirective.prototype, \"allEvents\", {\n        /**\n         * @deprecated\n         */\n        set: /**\n         * @deprecated\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._allEvents = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaDroppableDirective.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._context;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._context = value;\n            this.droppable = !!value ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaDroppableDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.isAlive = true;\n    };\n    DejaDroppableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[deja-droppable]',\n                },] }\n    ];\n    /** @nocollapse */\n    DejaDroppableDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DejaClipboardService, decorators: [{ type: Optional }] }\n    ]; };\n    DejaDroppableDirective.propDecorators = {\n        allEvents: [{ type: Input, args: ['continous-dragover',] }],\n        droppable: [{ type: HostBinding, args: ['attr.droppable',] }],\n        context: [{ type: Input, args: ['deja-droppable',] }]\n    };\n    return DejaDroppableDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaDragDropModule = /** @class */ (function () {\n    function DejaDragDropModule() {\n    }\n    DejaDragDropModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DejaDraggableDirective, DejaDroppableDirective],\n                    exports: [DejaDraggableDirective, DejaDroppableDirective],\n                },] }\n    ];\n    return DejaDragDropModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DejaDragDropModule, DejaDraggableDirective, DejaDroppableDirective };\n\n//# sourceMappingURL=deja-js-component-dragdrop.js.map","import { CommonModule } from '@angular/common';\nimport { Component, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaListLoaderComponent = /** @class */ (function () {\n    function DejaListLoaderComponent() {\n    }\n    DejaListLoaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'deja-list-loader',\n                    template: \"<div class=\\\"spinner\\\">\\n    <div class=\\\"bounce1\\\"></div>\\n    <div class=\\\"bounce2\\\"></div>\\n    <div class=\\\"bounce3\\\"></div>\\n</div>\\n\",\n                    styles: [\":host .spinner{margin:40px auto 0;width:70px;text-align:center}:host .spinner>div{width:10px;height:10px;border-radius:100%;display:inline-block;-webkit-animation:1.4s ease-in-out infinite both sk-bouncedelay;animation:1.4s ease-in-out infinite both sk-bouncedelay}:host .spinner .bounce1{-webkit-animation-delay:-.32s;animation-delay:-.32s}:host .spinner .bounce2{-webkit-animation-delay:-.16s;animation-delay:-.16s}@-webkit-keyframes sk-bouncedelay{0%,100%,80%{-webkit-transform:scale(0)}40%{-webkit-transform:scale(1)}}@keyframes sk-bouncedelay{0%,100%,80%{-webkit-transform:scale(0);transform:scale(0)}40%{-webkit-transform:scale(1);transform:scale(1)}}\"]\n                }] }\n    ];\n    return DejaListLoaderComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaListLoaderModule = /** @class */ (function () {\n    function DejaListLoaderModule() {\n    }\n    DejaListLoaderModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DejaListLoaderComponent],\n                    exports: [DejaListLoaderComponent],\n                    imports: [\n                        CommonModule,\n                    ],\n                },] }\n    ];\n    return DejaListLoaderModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DejaListLoaderModule, DejaListLoaderComponent };\n\n//# sourceMappingURL=deja-js-component-loaders.js.map","import { CommonModule } from '@angular/common';\nimport { MatButtonModule, MatCheckboxModule, MatIconModule, MatInputModule } from '@angular/material';\nimport { DejaDragDropModule } from '@deja-js/component/dragdrop';\nimport { DejaListLoaderModule } from '@deja-js/component/loaders';\nimport { __extends, __read } from 'tslib';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { DejaChildValidatorDirective, DejaClipboardService, DejaItemComponent, ItemListBase, KeyCodes, Position, Rect, ViewPortService, DejaChildValidatorModule, DejaItemModule, DejaTextMetricsModule } from '@deja-js/core';\nimport { BehaviorSubject, combineLatest, from, fromEvent, merge, of, Subject, timer } from 'rxjs';\nimport { debounceTime, filter, first, map, merge as merge$1, switchMap, takeWhile, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar noop = (/**\n * @return {?}\n */\nfunction () { });\n/**\n * Composant de liste évoluée avec gestion de viewport et templating\n */\nvar DejaTreeListComponent = /** @class */ (function (_super) {\n    __extends(DejaTreeListComponent, _super);\n    function DejaTreeListComponent(changeDetectorRef, viewPort, elementRef, _control, clipboardService) {\n        var _this = _super.call(this, changeDetectorRef, viewPort) || this;\n        _this.viewPort = viewPort;\n        _this.elementRef = elementRef;\n        _this._control = _control;\n        _this.clipboardService = clipboardService;\n        /**\n         * Correspond au ngModel du champ de filtrage ou recherche\n         */\n        _this.query = '';\n        /**\n         * Largeur des éléments par defaut si différent de 100%\n         */\n        _this.itemsWidth = null;\n        /**\n         * Exécuté lorsque le déplacement d'une ligne est terminée.\n         */\n        _this.itemDragEnd = new EventEmitter();\n        /**\n         * Exécuté lorsque le déplacement d'une ligne commence.\n         */\n        _this.itemDragStart = new EventEmitter();\n        /**\n         * Exécuté lorsque la scrollbar change de position.\n         */\n        _this.scroll = new EventEmitter();\n        /**\n         * Exécuté lorsque l'utilisateur sélectionne ou désélectionne une ligne.\n         */\n        _this.selectedChange = new EventEmitter();\n        /**\n         * Exécuté lorsque le calcul du viewPort est executé.\n         */\n        _this.viewPortChanged = new EventEmitter();\n        // NgModel implementation\n        _this.onTouchedCallback = noop;\n        _this.onChangeCallback = noop;\n        _this._keyboardNavigation = false;\n        _this.rangeStartIndex = 0;\n        _this.filterExpression = '';\n        _this._searchArea = false;\n        _this._sortable = false;\n        _this._itemsDraggable = false;\n        _this.hasCustomService = false;\n        _this.hasLoadingEvent = false;\n        _this._modelIsValue = false;\n        _this._disabled = null;\n        _this.keyboardNavigation$ = new Subject();\n        _this.clearFilterExpression$ = new BehaviorSubject(null);\n        _this.writeValue$ = new Subject();\n        _this.selectItems$ = new Subject();\n        _this.contentInitialized$ = new Subject();\n        _this.setQuery$ = new Subject();\n        if (_this._control) {\n            _this._control.valueAccessor = _this;\n        }\n        from(_this.clearFilterExpression$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), debounceTime(400))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.filterExpression = ''; }));\n        from(_this.keyboardNavigation$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), tap((/**\n         * @return {?}\n         */\n        function () { return _this._keyboardNavigation = true; })), debounceTime(1000))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._keyboardNavigation = false;\n            _this.changeDetectorRef.markForCheck();\n        }));\n        fromEvent(window, 'resize').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), debounceTime(5))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.viewPort.deleteSizeCache();\n            _this.viewPort.refresh();\n            _this.changeDetectorRef.markForCheck();\n        }));\n        from(_this.setQuery$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), debounceTime(250), tap((/**\n         * @param {?} query\n         * @return {?}\n         */\n        function (query) {\n            _this.query = query;\n            _this.setCurrentItem(undefined);\n        })), switchMap((/**\n         * @return {?}\n         */\n        function () { return _this.calcViewList$(); })))\n            .subscribe(noop);\n        /** @type {?} */\n        var selectItems$ = combineLatest(_this.selectItems$, _this.contentInitialized$).pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var _b = __read(_a, 1), value = _b[0];\n            return value;\n        })), map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { return _this.getVirtualSelectedEntities(value); })), map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { return (value instanceof Array && value) || (value && [value]) || []; })), tap((/**\n         * @param {?} values\n         * @return {?}\n         */\n        function (values) { return _super.prototype.setSelectedItems.call(_this, values); })));\n        /** @type {?} */\n        var selectModels$ = combineLatest(_this.writeValue$, _this.contentInitialized$).pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var _b = __read(_a, 1), value = _b[0];\n            if (_this.modelIsValue === undefined) {\n                if (value instanceof Array) {\n                    /** @type {?} */\n                    var av = value || [];\n                    /** @type {?} */\n                    var modelType = av.length && typeof av[0];\n                    _this.modelIsValue = modelType && modelType === 'string' || modelType === 'number';\n                }\n                else {\n                    /** @type {?} */\n                    var modelType = typeof value;\n                    _this.modelIsValue = value === '' || modelType === 'string' || modelType === 'number';\n                }\n            }\n            if (_this.modelIsValue) {\n                _this.query = '';\n            }\n            return value;\n        })), map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { return _this.getVirtualSelectedEntities(value); })), tap((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { return _super.prototype.setSelectedModels.call(_this, !value || _this._multiSelect || value instanceof Array ? value : [value]); })));\n        merge(selectModels$, selectItems$).pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _super.prototype.getItemListService.call(_this).ensureSelection();\n            _this.changeDetectorRef.markForCheck();\n        }));\n        _this._viewPortChanged = _this.viewPortChanged;\n        _this.maxHeight = 0;\n        return _this;\n    }\n    Object.defineProperty(DejaTreeListComponent.prototype, \"listElememtRef\", {\n        set: /**\n         * @param {?} elem\n         * @return {?}\n         */\n        function (elem) {\n            this.listElement = elem.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.keyboardNavigation = /**\n     * @return {?}\n     */\n    function () {\n        return this._keyboardNavigation;\n    };\n    Object.defineProperty(DejaTreeListComponent.prototype, \"minSearchlength\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._minSearchLength;\n        },\n        /** Définit la longueur minimale de caractères dans le champ de recherche avant que la recherche ou le filtrage soient effectués */\n        set: /**\n         * Définit la longueur minimale de caractères dans le champ de recherche avant que la recherche ou le filtrage soient effectués\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minSearchLength = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"searchArea\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._searchArea || this.minSearchlength > 0;\n        },\n        /** Affiche un barre de recherche au dessus de la liste. */\n        set: /**\n         * Affiche un barre de recherche au dessus de la liste.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._searchArea = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"modelIsValue\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._modelIsValue;\n        },\n        /** Définit une valeur indiquant si en reactive form le model renvoyé doit être un obeject oue une valeur */\n        set: /**\n         * Définit une valeur indiquant si en reactive form le model renvoyé doit être un obeject oue une valeur\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._modelIsValue = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"sortable\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._sortable;\n        },\n        /** Retourne ou définit une valeur indiquant si les lignes de la liste peuvent être déplacées manuelement par l'utilisateur */\n        set: /**\n         * Retourne ou définit une valeur indiquant si les lignes de la liste peuvent être déplacées manuelement par l'utilisateur\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._sortable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"itemsDraggable\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._itemsDraggable;\n        },\n        /** Retourne ou définit une valeur indiquant si les lignes peuvent être déplacées vers un autre composant */\n        set: /**\n         * Retourne ou définit une valeur indiquant si les lignes peuvent être déplacées vers un autre composant\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._itemsDraggable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"pageSize\", {\n        /** Retourne le nombre de lignes à sauter en cas de pression sur les touches PageUp ou PageDown */\n        get: /**\n         * Retourne le nombre de lignes à sauter en cas de pression sur les touches PageUp ou PageDown\n         * @return {?}\n         */\n        function () {\n            if (this._pageSize === 0) {\n                /** @type {?} */\n                var vpRowHeight = this.getViewPortRowHeight();\n                /** @type {?} */\n                var containerHeight = this.maxHeight || this.listElement.clientHeight;\n                return Math.floor(containerHeight / vpRowHeight);\n            }\n            return this._pageSize;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._pageSize = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"hintLabel\", {\n        /** Retourne un texte de conseil en cas d'erreur de validation ou autre */\n        get: /**\n         * Retourne un texte de conseil en cas d'erreur de validation ou autre\n         * @return {?}\n         */\n        function () {\n            return this._hintLabel;\n        },\n        /** Définit un texte de conseil en cas d'erreur de validation ou autre */\n        set: /**\n         * Définit un texte de conseil en cas d'erreur de validation ou autre\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.setHintLabel(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"viewPortRowHeight\", {\n        /** Définit la hauteur d'une ligne pour le calcul du viewport en pixels (la valeur par défaut sera utilisée si aucune valeur n'est setté). */\n        set: /**\n         * Définit la hauteur d'une ligne pour le calcul du viewport en pixels (la valeur par défaut sera utilisée si aucune valeur n'est setté).\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.setViewPortRowHeight(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"viewportMode\", {\n        /**\n         * Les valeurs acceptées en paramètre se trouvent dans l'enum ViewportMode (disabled, constant, variable ou auto)\n         * Attention, une désactivation du viewport dégrade considérablement les performances de la liste et ne doit pas être activée si la liste\n         * est suceptible de contenir beaucoup d'éléments.\n         */\n        set: /**\n         * Les valeurs acceptées en paramètre se trouvent dans l'enum ViewportMode (disabled, constant, variable ou auto)\n         * Attention, une désactivation du viewport dégrade considérablement les performances de la liste et ne doit pas être activée si la liste\n         * est suceptible de contenir beaucoup d'éléments.\n         * @param {?} mode\n         * @return {?}\n         */\n        function (mode) {\n            this.setViewportMode(mode);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"childrenField\", {\n        /** Définit le champ utilisé pour la liste des enfants d'un parent */\n        get: /**\n         * Définit le champ utilisé pour la liste des enfants d'un parent\n         * @return {?}\n         */\n        function () {\n            return this._childrenField;\n        },\n        /** Retourne le champ utilisé pour la liste des enfants d'un parent */\n        set: /**\n         * Retourne le champ utilisé pour la liste des enfants d'un parent\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setChildrenField.call(this, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"textField\", {\n        /** Définit le champ à utiliser comme valeur d'affichage. */\n        set: /**\n         * Définit le champ à utiliser comme valeur d'affichage.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setTextField.call(this, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"valueField\", {\n        /** Définit le champ à utiliser comme valeur de comparaison. */\n        set: /**\n         * Définit le champ à utiliser comme valeur de comparaison.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setValueField.call(this, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"searchField\", {\n        /** Retourne le champ à utiliser comme champ de recherche.\n         * Ce champ peut indiquer, un champ contenant une valeur, un texte indexé, ou une fonction.\n         */\n        get: /**\n         * Retourne le champ à utiliser comme champ de recherche.\n         * Ce champ peut indiquer, un champ contenant une valeur, un texte indexé, ou une fonction.\n         * @return {?}\n         */\n        function () {\n            return this._searchField;\n        },\n        /** Définit le champ à utiliser comme champ de recherche.\n         * Ce champ peut indiquer, un champ contenant une valeur, un texte indexé, ou une fonction.\n         */\n        set: /**\n         * Définit le champ à utiliser comme champ de recherche.\n         * Ce champ peut indiquer, un champ contenant une valeur, un texte indexé, ou une fonction.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setSearchField.call(this, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"maxHeight\", {\n        /** Retourne la hauteur maximum avant que le composant affiche une scrollbar\n         * spécifier une grande valeur pour ne jamais afficher de scrollbar\n         * Spécifier 0 pour que le composant determine sa hauteur à partir du container\n         */\n        get: /**\n         * Retourne la hauteur maximum avant que le composant affiche une scrollbar\n         * spécifier une grande valeur pour ne jamais afficher de scrollbar\n         * Spécifier 0 pour que le composant determine sa hauteur à partir du container\n         * @return {?}\n         */\n        function () {\n            return this.getMaxHeight();\n        },\n        /** Définit la hauteur maximum avant que le composant affiche une scrollbar\n         * spécifier une grande valeur pour ne jamais afficher de scrollbar\n         * Spécifier 0 pour que le composant determine sa hauteur à partir du container\n         */\n        set: /**\n         * Définit la hauteur maximum avant que le composant affiche une scrollbar\n         * spécifier une grande valeur pour ne jamais afficher de scrollbar\n         * Spécifier 0 pour que le composant determine sa hauteur à partir du container\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setMaxHeight.call(this, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"currentItem\", {\n        /** Retourne la ligne courant ou ligne active */\n        get: /**\n         * Retourne la ligne courant ou ligne active\n         * @return {?}\n         */\n        function () {\n            return _super.prototype.getCurrentItem.call(this);\n        },\n        /** Définit la ligne courant ou ligne active */\n        set: /**\n         * Définit la ligne courant ou ligne active\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            _super.prototype.setCurrentItem.call(this, item);\n            if (item) {\n                this.ensureItemVisible(item);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"depthMax\", {\n        /** Retourne le nombre de niveau pour une liste hierarchique */\n        get: /**\n         * Retourne le nombre de niveau pour une liste hierarchique\n         * @return {?}\n         */\n        function () {\n            return this._depthMax;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"multiSelect\", {\n        /** Retourne une valeur indiquant si plusieurs lignes peuvent être sélectionées. */\n        get: /**\n         * Retourne une valeur indiquant si plusieurs lignes peuvent être sélectionées.\n         * @return {?}\n         */\n        function () {\n            return this._multiSelect;\n        },\n        /** Définit une valeur indiquant si plusieurs lignes peuvent être sélectionées. */\n        set: /**\n         * Définit une valeur indiquant si plusieurs lignes peuvent être sélectionées.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setMultiSelect.call(this, coerceBooleanProperty(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"selectedItems\", {\n        /** Retourne la liste des éléments selectionés en mode multiselect */\n        get: /**\n         * Retourne la liste des éléments selectionés en mode multiselect\n         * @return {?}\n         */\n        function () {\n            return _super.prototype.getSelectedItems.call(this);\n        },\n        /** Définit la liste des éléments selectionés en mode multiselect */\n        set: /**\n         * Définit la liste des éléments selectionés en mode multiselect\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== undefined) {\n                this.selectItems$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"selectedItem\", {\n        /** Retourne l'éléments selectioné en mode single select */\n        get: /**\n         * Retourne l'éléments selectioné en mode single select\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var selectedItem = _super.prototype.getSelectedItems.call(this);\n            return selectedItem && selectedItem[0];\n        },\n        /** Définit l'élément selectioné en mode single select */\n        set: /**\n         * Définit l'élément selectioné en mode single select\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== undefined) {\n                this.selectItems$.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"selectedModel\", {\n        /** Retourne le model selectioné en mode single select */\n        get: /**\n         * Retourne le model selectioné en mode single select\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var selectedModel = _super.prototype.getSelectedModels.call(this);\n            return selectedModel && selectedModel[0];\n        },\n        /** Définit le model selectioné en mode single select */\n        set: /**\n         * Définit le model selectioné en mode single select\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== undefined) {\n                this.writeValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"selectedModels\", {\n        /** Retourne la liste des models selectionés en mode multiselect */\n        get: /**\n         * Retourne la liste des models selectionés en mode multiselect\n         * @return {?}\n         */\n        function () {\n            return _super.prototype.getSelectedModels.call(this);\n        },\n        /** Définit la liste des models selectionés en mode multiselect */\n        set: /**\n         * Définit la liste des models selectionés en mode multiselect\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== undefined) {\n                this.writeValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"itemListService\", {\n        /** Retourne le service de liste utilisé par ce composant. Ce srevice permet de controller dynamiquement la liste, ou de faire du lazyloading. */\n        get: /**\n         * Retourne le service de liste utilisé par ce composant. Ce srevice permet de controller dynamiquement la liste, ou de faire du lazyloading.\n         * @return {?}\n         */\n        function () {\n            return this.getItemListService();\n        },\n        /** Definit le service de liste utilisé par ce composant. Ce srevice permet de controller dynamiquement la liste, ou de faire du lazyloading. */\n        set: /**\n         * Definit le service de liste utilisé par ce composant. Ce srevice permet de controller dynamiquement la liste, ou de faire du lazyloading.\n         * @param {?} itemListService\n         * @return {?}\n         */\n        function (itemListService) {\n            if (itemListService !== undefined) {\n                this.hasCustomService = true;\n                this.setItemListService(itemListService);\n                if (itemListService && itemListService.lastQuery) {\n                    this.query = itemListService.lastQuery.toString();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"sortingService\", {\n        /** Definit le service utilisé pour le tri de la liste */\n        set: /**\n         * Definit le service utilisé pour le tri de la liste\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.setSortingService(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"groupingService\", {\n        /** Definit le service utilisé pour le regroupement de la liste */\n        set: /**\n         * Definit le service utilisé pour le regroupement de la liste\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.setGroupingService(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"items\", {\n        /** Définit la liste des éléments */\n        set: /**\n         * Définit la liste des éléments\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            var _this = this;\n            delete this.hintLabel;\n            _super.prototype.setItems$.call(this, items).pipe(switchMap((/**\n             * @param {?} itms\n             * @return {?}\n             */\n            function (itms) {\n                if (_this.minSearchlength > 0 && !_this.query) {\n                    // Waiting for query\n                    _this._itemList = [];\n                    _this.changeDetectorRef.markForCheck();\n                    return of(itms);\n                }\n                else {\n                    return _this.calcViewList$().pipe(map((/**\n                     * @return {?}\n                     */\n                    function () { return itms; })));\n                }\n            })))\n                .subscribe(noop);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"loadingItems\", {\n        /**\n         * Set a observable called before the list will be displayed\n         */\n        set: /**\n         * Set a observable called before the list will be displayed\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.hasLoadingEvent = !!fn;\n            _super.prototype.setLoadingItems.call(this, fn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"selectingItem\", {\n        /**\n         * Set a promise or an observable called before an item selection\n         */\n        set: /**\n         * Set a promise or an observable called before an item selection\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            _super.prototype.setSelectingItem.call(this, fn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"unselectingItem\", {\n        /**\n         * Set a promise or an observable called before an item deselection\n         */\n        set: /**\n         * Set a promise or an observable called before an item deselection\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            _super.prototype.setUnselectingItem.call(this, fn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"expandingItem\", {\n        /**\n         * Set a promise or an observable called before an item expand\n         */\n        set: /**\n         * Set a promise or an observable called before an item expand\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            _super.prototype.setExpandingItem.call(this, fn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"collapsingItem\", {\n        /**\n         * Set a promise or an observable called before an item collapse\n         */\n        set: /**\n         * Set a promise or an observable called before an item collapse\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            _super.prototype.setCollapsingItem.call(this, fn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"models\", {\n        /** Définit la liste des éléments (tout type d'objet métier) */\n        set: /**\n         * Définit la liste des éléments (tout type d'objet métier)\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            var _this = this;\n            _super.prototype.setModels$.call(this, items).pipe(first(), switchMap((/**\n             * @return {?}\n             */\n            function () { return _this.calcViewList$(); })))\n                .subscribe(noop);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._disabled;\n        },\n        /** Permet de désactiver la liste */\n        set: /**\n         * Permet de désactiver la liste\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var disabled = coerceBooleanProperty(value);\n            this._disabled = disabled || null;\n            this.changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"waiter\", {\n        /** Retourne si le waiter doit être affiché dans la liste. */\n        get: /**\n         * Retourne si le waiter doit être affiché dans la liste.\n         * @return {?}\n         */\n        function () { return this._waiter; },\n        /** Definit si le waiter doit être affiché dans la liste. */\n        set: /**\n         * Definit si le waiter doit être affiché dans la liste.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== undefined) {\n                this._waiter = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"inputValidatorDirective\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value) {\n                value.parentControl = this._control;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"currentItemIndex\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.getCurrentItemIndex();\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _super.prototype.setCurrentItemIndex.call(this, value);\n            this.changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"itemTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.itemTemplateExternal || this.itemTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"parentItemTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.parentItemTemplateExternal || this.parentItemTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"loaderTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.loaderTemplateExternal || this.loaderTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"headerTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.headerTemplateExternal || this.headerTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"searchPrefixTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.searchPrefixTemplateExternal || this.searchPrefixTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"searchSuffixTemplate\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.searchSuffixTemplateExternal || this.searchSuffixTemplateInternal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DejaTreeListComponent.prototype, \"value\", {\n        // ************* ControlValueAccessor Implementation **************\n        get: \n        // ************* ControlValueAccessor Implementation **************\n        /**\n         * @return {?}\n         */\n        function () {\n            return this._multiSelect ? this.selectedItems : this.selectedItem;\n        },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) {\n            this.writeValue(val);\n            this.onChangeCallback(val);\n            this.onTouchedCallback();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.writeValue$.next(value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    // ************* End of ControlValueAccessor Implementation **************\n    /** Change l'état d'expansion de toute les lignes parentes */\n    // ************* End of ControlValueAccessor Implementation **************\n    /**\n     * Change l'état d'expansion de toute les lignes parentes\n     * @param {?=} collapsed\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.toggleAll$ = \n    // ************* End of ControlValueAccessor Implementation **************\n    /**\n     * Change l'état d'expansion de toute les lignes parentes\n     * @param {?=} collapsed\n     * @return {?}\n     */\n    function (collapsed) {\n        var _this = this;\n        return _super.prototype.toggleAll$.call(this, collapsed).pipe(switchMap((/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) { return _this.calcViewList$().pipe(first(), map((/**\n         * @return {?}\n         */\n        function () { return items; }))); })));\n    };\n    /** Change l'état d'expansion de toute les lignes parentes */\n    /**\n     * Change l'état d'expansion de toute les lignes parentes\n     * @param {?=} collapsed\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.toggleAll = /**\n     * Change l'état d'expansion de toute les lignes parentes\n     * @param {?=} collapsed\n     * @return {?}\n     */\n    function (collapsed) {\n        this.toggleAll$(collapsed).pipe(first()).subscribe(noop);\n    };\n    /** Positionne a scrollbar pour assurer que l'élément spécifié soit visible */\n    /**\n     * Positionne a scrollbar pour assurer que l'élément spécifié soit visible\n     * @param {?} item\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.ensureItemVisible = /**\n     * Positionne a scrollbar pour assurer que l'élément spécifié soit visible\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        _super.prototype.ensureItemVisible.call(this, item);\n    };\n    /** Efface le contenu de la liste */\n    /**\n     * Efface le contenu de la liste\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.clearViewPort = /**\n     * Efface le contenu de la liste\n     * @return {?}\n     */\n    function () {\n        _super.prototype.clearViewPort.call(this);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.items && this.options && this.options.length) {\n            /** @type {?} */\n            var selectedModels_1 = (/** @type {?} */ ([]));\n            this.valueField = 'value';\n            this.textField = 'text';\n            /** @type {?} */\n            var models = this.options.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            function (option) {\n                /** @type {?} */\n                var model = {\n                    text: option.text,\n                    value: option.value,\n                };\n                if (option.selected) {\n                    selectedModels_1.push(model);\n                }\n                return model;\n            }));\n            this.models = models;\n            if (selectedModels_1.length) {\n                this.selectedModels = selectedModels_1;\n            }\n            if (models.length > 100) {\n                // tslint:disable-next-line:no-debugger\n                debugger;\n                console.error('Select options with more than 100 items can have performance options. Please bind directly the items in code behind with items or models input.');\n            }\n        }\n        this.contentInitialized$.next(true);\n    };\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // FIXME Issue angular/issues/6005\n        // see http://stackoverflow.com/questions/34364880/expression-has-changed-after-it-was-checked\n        if (this._itemList.length === 0 && (this.hasCustomService || this.hasLoadingEvent)) {\n            timer(1).pipe(first(), switchMap((/**\n             * @return {?}\n             */\n            function () { return _this.calcViewList$(); })))\n                .subscribe(noop);\n        }\n        fromEvent(this.listElement, 'scroll').pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) { return [event, event.target.scrollTop, event.target.scrollLeft]; })), map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var _b = __read(_a, 3), event = _b[0], scrollTop = _b[1], scrollLeft = _b[2];\n            /** @type {?} */\n            var e = (/** @type {?} */ ({\n                originalEvent: event,\n                scrollLeft: scrollLeft,\n                scrollTop: scrollTop,\n            }));\n            _this.scroll.emit(e);\n            return scrollTop;\n        })))\n            .subscribe((/**\n         * @param {?} scrollPos\n         * @return {?}\n         */\n        function (scrollPos) { return _this.viewPort.scrollPosition$.next(scrollPos); }));\n        /** @type {?} */\n        var keyDown$ = fromEvent(this.listElement, 'keydown');\n        if (this.input) {\n            /** @type {?} */\n            var inputKeyDown$ = (/** @type {?} */ (fromEvent(this.input.nativeElement, 'keydown')));\n            keyDown$ = keyDown$.pipe(merge$1(inputKeyDown$));\n        }\n        keyDown$.pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return !_this.disabled; })), filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n            return keyCode === KeyCodes.Home ||\n                keyCode === KeyCodes.End ||\n                keyCode === KeyCodes.PageUp ||\n                keyCode === KeyCodes.PageDown ||\n                keyCode === KeyCodes.UpArrow ||\n                keyCode === KeyCodes.DownArrow ||\n                keyCode === KeyCodes.Space ||\n                keyCode === KeyCodes.Enter;\n        })), switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) { return _this.ensureListCaches$().pipe(map((/**\n         * @return {?}\n         */\n        function () { return event; }))); })), map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!_this.rowsCount) {\n                return true;\n            }\n            // Set current item from index for keyboard features only\n            /** @type {?} */\n            var setCurrentIndex = (/**\n             * @param {?} index\n             * @return {?}\n             */\n            function (index) {\n                _this.currentItemIndex = index;\n                _this.ensureItemVisible(_this.currentItemIndex);\n                _this.viewPort.refresh();\n            });\n            /** @type {?} */\n            var currentIndex = _this.rangeStartIndex >= 0 ? _this.rangeStartIndex : _this.rangeStartIndex = _this.currentItemIndex;\n            /** @type {?} */\n            var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n            switch (keyCode) {\n                case KeyCodes.Home:\n                    if (event.shiftKey) {\n                        _this.selectRange$(currentIndex, 0).pipe(first()).subscribe(noop);\n                    }\n                    else if (!event.ctrlKey) {\n                        _this.rangeStartIndex = 0;\n                        _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                    }\n                    setCurrentIndex(0);\n                    return false;\n                case KeyCodes.End:\n                    if (event.shiftKey) {\n                        _this.selectRange$(currentIndex, _this.rowsCount - 1).pipe(first()).subscribe(noop);\n                    }\n                    else if (!event.ctrlKey) {\n                        _this.rangeStartIndex = _this.rowsCount - 1;\n                        _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                    }\n                    setCurrentIndex(_this.rowsCount - 1);\n                    return false;\n                case KeyCodes.PageUp:\n                    /** @type {?} */\n                    var upindex = Math.max(0, _this.currentItemIndex - _this._pageSize);\n                    if (event.shiftKey) {\n                        _this.selectRange$(currentIndex, upindex).pipe(first()).subscribe(noop);\n                    }\n                    else if (!event.ctrlKey) {\n                        _this.rangeStartIndex = upindex;\n                        _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                    }\n                    setCurrentIndex(upindex);\n                    return false;\n                case KeyCodes.PageDown:\n                    /** @type {?} */\n                    var dindex = Math.min(_this.rowsCount - 1, _this.currentItemIndex + _this._pageSize);\n                    if (event.shiftKey) {\n                        _this.selectRange$(currentIndex, dindex).pipe(first()).subscribe(noop);\n                    }\n                    else if (!event.ctrlKey) {\n                        _this.rangeStartIndex = dindex;\n                        _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                    }\n                    setCurrentIndex(dindex);\n                    return false;\n                case KeyCodes.UpArrow:\n                    /** @type {?} */\n                    var uaindex = Math.max(0, _this.currentItemIndex - 1);\n                    if (uaindex !== -1) {\n                        if (event.shiftKey) {\n                            _this.selectRange$(currentIndex, uaindex).pipe(first()).subscribe(noop);\n                        }\n                        else if (!event.ctrlKey) {\n                            _this.rangeStartIndex = uaindex;\n                            _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                        }\n                        setCurrentIndex(uaindex);\n                    }\n                    return false;\n                case KeyCodes.DownArrow:\n                    /** @type {?} */\n                    var daindex = Math.min(_this.rowsCount - 1, _this.currentItemIndex + 1);\n                    if (daindex !== -1) {\n                        if (event.shiftKey) {\n                            _this.selectRange$(currentIndex, daindex).pipe(first()).subscribe(noop);\n                        }\n                        else if (!event.ctrlKey) {\n                            _this.rangeStartIndex = daindex;\n                            _this.selectRange$(_this.rangeStartIndex).pipe(first()).subscribe(noop);\n                        }\n                        setCurrentIndex(daindex);\n                    }\n                    return false;\n                case KeyCodes.Space:\n                    /** @type {?} */\n                    var target = (/** @type {?} */ (event.target));\n                    if (target.tagName === 'INPUT' && !event.ctrlKey && !event.shiftKey) {\n                        return true;\n                    }\n                    /** @type {?} */\n                    var sitem_1 = (/** @type {?} */ (_this.currentItem));\n                    if (sitem_1) {\n                        if (_this.isCollapsible(sitem_1)) {\n                            _this.toggleCollapse$(currentIndex, !sitem_1.collapsed).pipe(first()).subscribe(noop);\n                        }\n                        else if (sitem_1.selected) {\n                            _this.toggleSelect$([sitem_1], false).pipe(first()).subscribe(noop);\n                        }\n                        else if (_this.multiSelect && event.ctrlKey) {\n                            _this.toggleSelect$([sitem_1], !sitem_1.selected).pipe(first()).subscribe(noop);\n                        }\n                        else {\n                            _this.unselectAll$().pipe(switchMap((/**\n                             * @return {?}\n                             */\n                            function () { return _this.toggleSelect$([sitem_1], true); })), first())\n                                .subscribe(noop);\n                        }\n                    }\n                    return false;\n                case KeyCodes.Enter:\n                    /** @type {?} */\n                    var eitem_1 = (/** @type {?} */ (_this.currentItem));\n                    if (eitem_1) {\n                        if (_this.isCollapsible(eitem_1)) {\n                            _this.toggleCollapse$(currentIndex, !eitem_1.collapsed).pipe(first()).subscribe(noop);\n                        }\n                        else if (_this.isSelectable(eitem_1)) {\n                            _this.unselectAll$().pipe(switchMap((/**\n                             * @return {?}\n                             */\n                            function () { return _this.toggleSelect$([eitem_1], true); })), first())\n                                .subscribe(noop);\n                        }\n                    }\n                    return false;\n                default:\n                    return true;\n            }\n        })))\n            .subscribe((/**\n         * @param {?} continuePropagation\n         * @return {?}\n         */\n        function (continuePropagation) {\n            if (!continuePropagation) {\n                _this.keyboardNavigation$.next();\n                _this.changeDetectorRef.markForCheck();\n                event.preventDefault();\n                return false;\n            }\n        }));\n        /** @type {?} */\n        var keyUp$ = (/** @type {?} */ (fromEvent(this.listElement, 'keyup')));\n        if (this.input) {\n            /** @type {?} */\n            var inputKeyup$ = (/** @type {?} */ (fromEvent(this.input.nativeElement, 'keyup')));\n            /** @type {?} */\n            var inputDrop$ = (/** @type {?} */ (fromEvent(this.input.nativeElement, 'drop')));\n            keyUp$ = keyUp$.pipe(merge$1(inputKeyup$, inputDrop$));\n        }\n        // Ensure list cache\n        keyUp$.pipe(takeWhile((/**\n         * @return {?}\n         */\n        function () { return _this._isAlive; })), filter((/**\n         * @return {?}\n         */\n        function () { return !_this.disabled; })), tap((/**\n         * @return {?}\n         */\n        function () {\n            if ((_this.query || '').length < _this.minSearchlength) {\n                _this._itemList = [];\n                return;\n            }\n        })), filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode || ((/** @type {?} */ (KeyCodes)))[event.code];\n            return keyCode >= KeyCodes.Key0 ||\n                keyCode === KeyCodes.Backspace ||\n                keyCode === KeyCodes.Space ||\n                keyCode === KeyCodes.Delete;\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            // Set current item from index for keyboard features only\n            /** @type {?} */\n            var setCurrentIndex = (/**\n             * @param {?} index\n             * @return {?}\n             */\n            function (index) {\n                _this.currentItemIndex = index;\n                _this.ensureItemVisible(_this.currentItemIndex);\n            });\n            if (!_this.searchArea) {\n                if ((/[a-zA-Z0-9]/).test(event.key)) {\n                    // Valid char\n                    _this.clearFilterExpression$.next(null);\n                    // Search next\n                    _this.filterExpression += event.key;\n                    /** @type {?} */\n                    var rg_1 = new RegExp(\"^\" + _this.filterExpression, 'i');\n                    _this.findNextMatch$((/**\n                     * @param {?} item\n                     * @return {?}\n                     */\n                    function (item) {\n                        if (item && _this.isSelectable(item)) {\n                            /** @type {?} */\n                            var label = _this.getTextValue(item);\n                            if (rg_1.test(label)) {\n                                return true;\n                            }\n                        }\n                        event.preventDefault();\n                        return false;\n                    }), _this.currentItemIndex).pipe(first())\n                        .subscribe((/**\n                     * @param {?} result\n                     * @return {?}\n                     */\n                    function (result) {\n                        if (result.index >= 0) {\n                            setCurrentIndex(result.index);\n                        }\n                    }));\n                }\n            }\n            else {\n                // Autocomplete, filter the list\n                _this.keyboardNavigation$.next();\n            }\n        }));\n        this.viewPort.element$.next(this.listElement);\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.mousedown = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        var _this = this;\n        if (this.mouseUp$sub) {\n            this.mouseUp$sub.unsubscribe();\n            this.mouseUp$sub = undefined;\n        }\n        if (this.disabled) {\n            return undefined;\n        }\n        /** @type {?} */\n        var target = (/** @type {?} */ (e.target));\n        /** @type {?} */\n        var itemIndex = this.getItemIndexFromHTMLElement(target);\n        if (itemIndex === undefined) {\n            return undefined;\n        }\n        /** @type {?} */\n        var isExpandButton = (/**\n         * @param {?} el\n         * @return {?}\n         */\n        function (el) {\n            return el.id === 'expandbtn' || el.parentElement.id === 'expandbtn';\n        });\n        /** @type {?} */\n        var item = this._itemList[itemIndex - this.vpStartRow];\n        this.clickedItem = item;\n        if ((!isExpandButton(target) || !this.isCollapsible(item)) && this.isSelectable(item) && (!e.ctrlKey || !this.multiSelect) && (e.button === 0 || !item.selected)) {\n            if (e.shiftKey && this.multiSelect) {\n                // Select all from current to clicked\n                this.selectRange$(itemIndex, this.currentItemIndex).pipe(first())\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.changeDetectorRef.markForCheck(); }));\n                return false;\n            }\n            else if (!e.ctrlKey) {\n                if (!this.multiSelect && item.selected) {\n                    return undefined;\n                }\n                this.unselectAll$().pipe(first()).subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.currentItemIndex = itemIndex;\n                    _this.toggleSelect$([item], true).pipe(first())\n                        .subscribe((/**\n                     * @return {?}\n                     */\n                    function () { return _this.changeDetectorRef.markForCheck(); }));\n                }));\n            }\n        }\n        this.mouseUp$sub = fromEvent(this.listElement, 'mouseup').pipe(first(), filter((/**\n         * @return {?}\n         */\n        function () { return !_this.disabled; })))\n            .subscribe((/**\n         * @param {?} upevt\n         * @return {?}\n         */\n        function (upevt) {\n            // Because .first()\n            _this.mouseUp$sub = undefined;\n            /** @type {?} */\n            var upTarget = (/** @type {?} */ (upevt.target));\n            /** @type {?} */\n            var upIndex = _this.getItemIndexFromHTMLElement(upTarget);\n            if (upIndex === undefined) {\n                return;\n            }\n            /** @type {?} */\n            var upItem = _this._itemList[upIndex - _this.vpStartRow];\n            if (_this.clickedItem && upItem !== _this.clickedItem) {\n                return;\n            }\n            if (upevt.shiftKey) {\n                return;\n            }\n            if (upevt.button !== 0) {\n                // Right click menu\n                return;\n            }\n            if (_this.isCollapsible(upItem) && (isExpandButton(upTarget) || !_this.isSelectable(upItem))) {\n                /** @type {?} */\n                var treeItem = (/** @type {?} */ (upItem));\n                _this.toggleCollapse$(upIndex, !treeItem.collapsed).pipe(first()).subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.currentItemIndex = upIndex;\n                }));\n            }\n            else if (upevt.ctrlKey) {\n                if (_this.multiSelect) {\n                    _this.toggleSelect$([upItem], !upItem.selected).pipe(first())\n                        .subscribe((/**\n                     * @return {?}\n                     */\n                    function () {\n                        _this.currentItemIndex = upIndex;\n                        _this.changeDetectorRef.markForCheck();\n                    }));\n                }\n                else {\n                    /** @type {?} */\n                    var o = _this.selectedItem && _this.selectedItem !== upItem ? _this.toggleSelect$([_this.selectedItem], false).pipe(switchMap((/**\n                     * @return {?}\n                     */\n                    function () { return _this.toggleSelect$([upItem], true); }))) : _this.toggleSelect$([upItem], !upItem.selected);\n                    o.pipe(first())\n                        .subscribe((/**\n                     * @return {?}\n                     */\n                    function () {\n                        _this.currentItemIndex = upIndex;\n                        _this.changeDetectorRef.markForCheck();\n                    }));\n                }\n            }\n            _this.rangeStartIndex = -1;\n        }));\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.getDragContext = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var _this = this;\n        if (!this.clipboardService || (!this.sortable && !this.itemsDraggable)) {\n            return null;\n        }\n        return {\n            dragendcallback: (/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                _this.itemDragEnd.emit(event);\n                delete _this._ddStartIndex;\n                delete _this._ddTargetIndex;\n                _this.calcViewList$().pipe(first()).subscribe(noop); // Comment this line to debug dragdrop\n            }),\n            dragstartcallback: (/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                /** @type {?} */\n                var targetIndex = _this.getItemIndexFromHTMLElement((/** @type {?} */ (event.target)));\n                if (targetIndex === undefined) {\n                    return;\n                }\n                _this._ddStartIndex = index;\n                event.dragObject = _this._itemList[targetIndex - _this.vpStartRow];\n                _this.itemDragStart.emit(event);\n            }),\n            object: {\n                index: index,\n            },\n        };\n    };\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.getDropContext = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.clipboardService || !this.sortable) {\n            return null;\n        }\n        /** @type {?} */\n        var dragcallback = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (_this._ddStartIndex === undefined) {\n                return;\n            }\n            /** @type {?} */\n            var targetIndex = _this.getItemIndexFromHTMLElement((/** @type {?} */ (event.target)));\n            if (targetIndex === undefined) {\n                return;\n            }\n            // Faire calculer le target final en fonction de la hierarchie par le service\n            _this.calcDragTargetIndex$(_this._ddStartIndex, targetIndex).pipe(switchMap((/**\n             * @param {?} finalTarget\n             * @return {?}\n             */\n            function (finalTarget) {\n                if (finalTarget !== undefined && finalTarget !== _this._ddTargetIndex) {\n                    _this._ddTargetIndex = finalTarget;\n                    return _this.calcViewList$().pipe(first(), map((/**\n                     * @return {?}\n                     */\n                    function () { return finalTarget; })));\n                }\n                else {\n                    return of(finalTarget);\n                }\n            })))\n                .subscribe(noop);\n            event.preventDefault();\n            return;\n        });\n        return {\n            dragentercallback: dragcallback,\n            dragovercallback: dragcallback,\n            dropcallback: (/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                delete _this._ddStartIndex;\n                delete _this._ddTargetIndex;\n                _this.drop$().pipe(switchMap((/**\n                 * @return {?}\n                 */\n                function () { return _this.calcViewList$().pipe(first()); })))\n                    .subscribe(noop);\n                event.preventDefault();\n            }),\n        };\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.dragLeave = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var listRect = this.listElement.getBoundingClientRect();\n        /** @type {?} */\n        var listBounds = Rect.fromLTRB(listRect.left, listRect.top, listRect.right, listRect.bottom);\n        if (!listBounds.containsPoint(new Position(event.pageX, event.pageY))) {\n            this._ddTargetIndex = this._ddStartIndex;\n            this.calcViewList$().pipe(first()).subscribe(noop);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.onSelectionChange = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var outputEmitter = null;\n        /** @type {?} */\n        var output = null;\n        if (this.multiSelect) {\n            /** @type {?} */\n            var models = this.selectedModels;\n            outputEmitter = (/** @type {?} */ ({\n                items: this.selectedItems,\n                models: models,\n            }));\n            if (this.modelIsValue) {\n                /** @type {?} */\n                var valueField_1 = this.getValueField();\n                if (models.find((/**\n                 * @param {?} m\n                 * @return {?}\n                 */\n                function (m) { return !!m[valueField_1]; }))) {\n                    output = models.map((/**\n                     * @param {?} m\n                     * @return {?}\n                     */\n                    function (m) { return m[valueField_1] !== undefined ? m[valueField_1] : m; }));\n                }\n            }\n            else {\n                output = models;\n            }\n        }\n        else {\n            /** @type {?} */\n            var model = this.selectedModel;\n            outputEmitter = (/** @type {?} */ ({\n                item: this.selectedItems[0],\n                model: model,\n            }));\n            if (this.modelIsValue) {\n                /** @type {?} */\n                var valueField = this.getValueField();\n                output = model[valueField] !== undefined ? model[valueField] : model;\n            }\n            else {\n                output = model;\n            }\n        }\n        this.onChangeCallback(output);\n        this.selectedChange.emit(outputEmitter);\n    };\n    /**\n     * @param {?} indexFrom\n     * @param {?=} indexTo\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.selectRange$ = /**\n     * @param {?} indexFrom\n     * @param {?=} indexTo\n     * @return {?}\n     */\n    function (indexFrom, indexTo) {\n        var _this = this;\n        return _super.prototype.selectRange$.call(this, indexFrom, indexTo).pipe(tap((/**\n         * @param {?} selectedCount\n         * @return {?}\n         */\n        function (selectedCount) {\n            if (selectedCount) {\n                // Raise event\n                _this.onSelectionChange();\n            }\n            return selectedCount;\n        })), tap((/**\n         * @return {?}\n         */\n        function () { return _this.changeDetectorRef.markForCheck(); })));\n    };\n    /**\n     * @param {?} items\n     * @param {?} state\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.toggleSelect$ = /**\n     * @param {?} items\n     * @param {?} state\n     * @return {?}\n     */\n    function (items, state) {\n        var _this = this;\n        if (!this._multiSelect && !items[0].selected === !state) {\n            return of(items);\n        }\n        else {\n            return _super.prototype.toggleSelect$.call(this, items, state).pipe(tap((/**\n             * @return {?}\n             */\n            function () {\n                // Raise event\n                _this.onSelectionChange();\n            })));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.calcViewList$ = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return _super.prototype.calcViewList$.call(this, this.query).pipe(tap((/**\n         * @return {?}\n         */\n        function () { return _this.changeDetectorRef.markForCheck(); })));\n    };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    DejaTreeListComponent.prototype.getItemClass = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        /** @type {?} */\n        var classNames = (/** @type {?} */ (['listitem']));\n        if (item.className) {\n            classNames.push(item.className);\n        }\n        if (item.collapsing || item.expanding) {\n            classNames.push('hide');\n        }\n        if (item.depth < this.depthMax) {\n            classNames.push('parent');\n        }\n        if (item.collapsed) {\n            classNames.push('collapsed');\n        }\n        if (item.selected) {\n            classNames.push('selected');\n        }\n        if (item.selectable === false) {\n            classNames.push('unselectable');\n        }\n        if (item.depth === this._depthMax && item.odd) {\n            classNames.push('odd');\n        }\n        return classNames.join(' ');\n    };\n    DejaTreeListComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [ViewPortService],\n                    selector: 'deja-tree-list',\n                    template: \"<div id=\\\"header\\\" *ngIf=\\\"searchArea\\\">\\n    <mat-form-field deja-child-validator id=\\\"input\\\" *ngIf=\\\"searchArea\\\">\\n        <input #inputelement type=\\\"text\\\" matInput tabindex=\\\"0\\\" [ngModel]=\\\"query\\\" [placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\" (input)=\\\"setQuery$.next(model && model.value)\\\" #model=\\\"ngModel\\\">\\n        <span *ngIf=\\\"searchPrefixTemplate\\\" matPrefix>\\n\\t\\t\\t<ng-template [ngTemplateOutlet]=\\\"searchPrefixTemplate\\\"></ng-template>\\n\\t\\t</span>\\n        <span *ngIf=\\\"searchSuffixTemplate\\\" matSuffix>\\n\\t\\t\\t<ng-template [ngTemplateOutlet]=\\\"searchSuffixTemplate\\\"></ng-template>\\n\\t\\t</span>\\n    </mat-form-field>\\n</div>\\n<div id=\\\"listheader\\\" *ngIf=\\\"headerTemplate\\\">\\n    <ng-template [ngTemplateOutlet]=\\\"headerTemplate\\\"></ng-template>\\n</div>\\n<div [id]=\\\"listElementId\\\" #listElement class=\\\"deja-listcontainer\\\" [attr.itemscount]=\\\"itemList && itemList.length\\\" [attr.depth-max]=\\\"depthMax || null\\\" [attr.vp-rowheight]=\\\"getViewPortRowHeight()\\\" [style.max-height.px]=\\\"maxHeight || null\\\" tabindex=\\\"1\\\" [class.hasheader]=\\\"headerTemplate\\\" [class.dragover]=\\\"ddStartIndex !== undefined ? ddStartIndex : null\\\" [attr.keynav]=\\\"keyboardNavigation()\\\" (dragleave)=\\\"sortable ? dragLeave($event): null\\\" (mousedown)=\\\"mousedown($event)\\\" [deja-droppable]=\\\"getDropContext()\\\">\\n    <div id=\\\"nodata-holder\\\" *ngIf=\\\"(!itemList || itemList.length === 0) && !waiter\\\">{{ nodataholder }}</div>\\n    <div id=\\\"error-hint\\\" *ngIf=\\\"hintLabel\\\">{{ hintLabel }}</div>\\n    <div *ngIf=\\\"vpBeforeHeight && !waiter\\\" [style.height.px]=\\\"vpBeforeHeight\\\"></div>\\n    <ng-container *ngIf=\\\"!waiter\\\">\\n        <div *ngFor=\\\"let item of treeItemList; let index = index\\\" #listitem [attr.class]=\\\"getItemClass(item)\\\" [attr.current]=\\\"(vpStartRow+index === currentItemIndex) || null\\\" [attr.depth]=\\\"depthMax ? item.depth : null\\\" [attr.id]=\\\"item.id || null\\\" [attr.flat]=\\\"vpStartRow + index\\\" [deja-draggable]=\\\"getDragContext(vpStartRow + index)\\\" [style.width.px]=\\\"itemsWidth\\\" [style.height.px]=\\\"getItemHeight(item)\\\">\\n            <span id=\\\"expandbtn\\\">\\n                <mat-icon *ngIf=\\\"item.$items?.length\\\">arrow_drop_down</mat-icon>\\n            </span>\\n            \\n            <ng-container *ngIf=\\\"(!item.$items || !parentItemTemplate) && (item.$items || !itemTemplate)\\\">{{ getTextValue(item) }}</ng-container>\\n            <ng-container class=\\\"item-content\\\" *ngIf=\\\"item.$items && parentItemTemplate\\\">\\n                <ng-template [ngTemplateOutlet]=\\\"parentItemTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: item, query: query, flatindex: vpStartRow+index }\\\"></ng-template>\\n            </ng-container>\\n            <ng-container class=\\\"item-content\\\" *ngIf=\\\"!item.$items && itemTemplate\\\">\\n                <ng-template [ngTemplateOutlet]=\\\"itemTemplate\\\" [ngTemplateOutletContext]=\\\"{ $implicit: item, query: query, flatindex: vpStartRow+index }\\\"></ng-template>\\n            </ng-container>\\n        </div>\\n    </ng-container>\\n    <div *ngIf=\\\"vpAfterHeight && !waiter\\\" [style.height.px]=\\\"vpAfterHeight\\\"></div>\\n    <deja-list-loader id=\\\"loader\\\" *ngIf=\\\"waiter && !loaderTemplate\\\"></deja-list-loader>\\n    <ng-container *ngIf=\\\"waiter && loaderTemplate\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"loaderTemplate\\\"></ng-template>\\n    </ng-container>\\n</div>\",\n                    styles: [\"deja-tree-list{display:flex;position:relative;flex-direction:column;align-content:stretch;overflow:hidden}deja-tree-list.ng-invalid #input .mat-form-field-wrapper .mat-form-field-underline .mat-form-field-ripple{opacity:1;-webkit-transform:scaleY(1);transform:scaleY(1)}deja-tree-list #input{outline:0}deja-tree-list #header{flex:0 0 auto;align-items:center;display:flex}deja-tree-list #header #input{flex:1 1 auto}deja-tree-list #header button{flex:0 0 auto;margin:16px .5rem 16px 0}deja-tree-list #listheader{flex:0 0 auto;overflow:hidden;box-sizing:border-box}deja-tree-list .deja-listcontainer{flex:1 1 auto;outline:0;overflow:auto;padding:0;margin:0;position:relative}deja-tree-list .deja-listcontainer.hasheader{border-top:0}deja-tree-list .deja-listcontainer[keynav=false]:not(.dragover) div.listitem:not(.unselectable):hover{cursor:pointer}deja-tree-list .deja-listcontainer[valign=bottom]{border-top:none}deja-tree-list .deja-listcontainer #error-hint,deja-tree-list .deja-listcontainer #nodata-holder{margin:.5rem}deja-tree-list #loader{position:absolute;left:0;right:0}deja-tree-list .deja-listcontainer[vprowheight=\\\"0\\\"]>div.listitem{padding:.35rem .1rem}deja-tree-list .deja-listcontainer>div.listitem{opacity:1;margin:0;transition-timing-function:linear;transition-duration:.3s;transition-property:max-height,opacity;display:flex;align-items:center}deja-tree-list .deja-listcontainer>div.listitem.hide{opacity:0!important;max-height:0!important;transition-timing-function:ease-out}deja-tree-list .deja-listcontainer>div.listitem #expandbtn{width:24px;cursor:pointer}deja-tree-list .deja-listcontainer>div.listitem.parent.collapsed #expandbtn>.mat-icon{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}deja-tree-list .deja-listcontainer [depth=\\\"0\\\"]{padding-left:0}deja-tree-list .deja-listcontainer [depth=\\\"1\\\"]{padding-left:1rem}deja-tree-list .deja-listcontainer [depth=\\\"2\\\"]{padding-left:2rem}deja-tree-list .deja-listcontainer [depth=\\\"3\\\"]{padding-left:3rem}deja-tree-list .deja-listcontainer [depth=\\\"4\\\"]{padding-left:4rem}deja-tree-list .deja-listcontainer [depth=\\\"5\\\"]{padding-left:5rem}deja-tree-list .deja-listcontainer [depth=\\\"6\\\"]{padding-left:6rem}deja-tree-list .deja-listcontainer [depth=\\\"7\\\"]{padding-left:7rem}deja-tree-list .deja-listcontainer [depth=\\\"8\\\"]{padding-left:8rem}deja-tree-list .deja-listcontainer [depth=\\\"9\\\"]{padding-left:9rem}deja-tree-list .deja-listcontainer [depth=\\\"10\\\"]{padding-left:10rem}deja-tree-list .deja-listcontainer [depth=\\\"11\\\"]{padding-left:11rem}deja-tree-list .deja-listcontainer [depth=\\\"12\\\"]{padding-left:12rem}deja-tree-list .deja-listcontainer [depth=\\\"13\\\"]{padding-left:13rem}deja-tree-list .deja-listcontainer [depth=\\\"14\\\"]{padding-left:14rem}deja-tree-list .deja-listcontainer [depth=\\\"15\\\"]{padding-left:15rem}deja-tree-list .deja-listcontainer [depth=\\\"16\\\"]{padding-left:16rem}deja-tree-list .deja-listcontainer [depth=\\\"17\\\"]{padding-left:17rem}deja-tree-list .deja-listcontainer [depth=\\\"18\\\"]{padding-left:18rem}deja-tree-list .deja-listcontainer [depth=\\\"19\\\"]{padding-left:19rem}deja-tree-list .deja-listcontainer [depth=\\\"20\\\"]{padding-left:20rem}deja-tree-list .deja-listcontainer [depth=\\\"21\\\"]{padding-left:21rem}deja-tree-list .deja-listcontainer [depth=\\\"22\\\"]{padding-left:22rem}deja-tree-list .deja-listcontainer [depth=\\\"23\\\"]{padding-left:23rem}deja-tree-list .deja-listcontainer [depth=\\\"24\\\"]{padding-left:24rem}deja-tree-list .deja-listcontainer [depth=\\\"25\\\"]{padding-left:25rem}deja-tree-list .deja-listcontainer [depth=\\\"26\\\"]{padding-left:26rem}deja-tree-list .deja-listcontainer [depth=\\\"27\\\"]{padding-left:27rem}deja-tree-list .deja-listcontainer [depth=\\\"28\\\"]{padding-left:28rem}deja-tree-list .deja-listcontainer [depth=\\\"29\\\"]{padding-left:29rem}deja-tree-list .deja-listcontainer [depth=\\\"30\\\"]{padding-left:30rem}deja-tree-list .deja-listcontainer [depth=\\\"31\\\"]{padding-left:31rem}deja-tree-list .deja-listcontainer [depth=\\\"32\\\"]{padding-left:32rem}deja-tree-list .deja-listcontainer [depth=\\\"33\\\"]{padding-left:33rem}deja-tree-list .deja-listcontainer [depth=\\\"34\\\"]{padding-left:34rem}deja-tree-list .deja-listcontainer [depth=\\\"35\\\"]{padding-left:35rem}deja-tree-list .deja-listcontainer [depth=\\\"36\\\"]{padding-left:36rem}deja-tree-list .deja-listcontainer [depth=\\\"37\\\"]{padding-left:37rem}deja-tree-list .deja-listcontainer [depth=\\\"38\\\"]{padding-left:38rem}deja-tree-list .deja-listcontainer [depth=\\\"39\\\"]{padding-left:39rem}deja-tree-list .deja-listcontainer [depth=\\\"40\\\"]{padding-left:40rem}deja-tree-list .deja-listcontainer [depth=\\\"41\\\"]{padding-left:41rem}deja-tree-list .deja-listcontainer [depth=\\\"42\\\"]{padding-left:42rem}deja-tree-list .deja-listcontainer [depth=\\\"43\\\"]{padding-left:43rem}deja-tree-list .deja-listcontainer [depth=\\\"44\\\"]{padding-left:44rem}deja-tree-list .deja-listcontainer [depth=\\\"45\\\"]{padding-left:45rem}deja-tree-list .deja-listcontainer [depth=\\\"46\\\"]{padding-left:46rem}deja-tree-list .deja-listcontainer [depth=\\\"47\\\"]{padding-left:47rem}deja-tree-list .deja-listcontainer [depth=\\\"48\\\"]{padding-left:48rem}deja-tree-list .deja-listcontainer [depth=\\\"49\\\"]{padding-left:49rem}deja-tree-list .deja-listcontainer [depth=\\\"50\\\"]{padding-left:50rem}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    DejaTreeListComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: ViewPortService },\n        { type: ElementRef },\n        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n        { type: DejaClipboardService, decorators: [{ type: Optional }] }\n    ]; };\n    DejaTreeListComponent.propDecorators = {\n        placeholder: [{ type: Input }],\n        nodataholder: [{ type: Input }],\n        query: [{ type: Input }],\n        itemTemplateExternal: [{ type: Input }],\n        parentItemTemplateExternal: [{ type: Input }],\n        loaderTemplateExternal: [{ type: Input }],\n        headerTemplateExternal: [{ type: Input }],\n        searchPrefixTemplateExternal: [{ type: Input }],\n        searchSuffixTemplateExternal: [{ type: Input }],\n        itemsWidth: [{ type: Input }],\n        itemDragEnd: [{ type: Output }],\n        itemDragStart: [{ type: Output }],\n        scroll: [{ type: Output }],\n        selectedChange: [{ type: Output }],\n        viewPortChanged: [{ type: Output }],\n        input: [{ type: ViewChild, args: ['inputelement',] }],\n        itemTemplateInternal: [{ type: ContentChild, args: ['itemTemplate',] }],\n        parentItemTemplateInternal: [{ type: ContentChild, args: ['parentItemTemplate',] }],\n        loaderTemplateInternal: [{ type: ContentChild, args: ['loaderTemplate',] }],\n        headerTemplateInternal: [{ type: ContentChild, args: ['headerTemplate',] }],\n        searchPrefixTemplateInternal: [{ type: ContentChild, args: ['searchPrefixTemplate',] }],\n        searchSuffixTemplateInternal: [{ type: ContentChild, args: ['searchSuffixTemplate',] }],\n        options: [{ type: ContentChildren, args: [DejaItemComponent,] }],\n        _disabled: [{ type: HostBinding, args: ['attr.disabled',] }],\n        listElememtRef: [{ type: ViewChild, args: ['listElement',] }],\n        minSearchlength: [{ type: Input, args: ['min-search-length',] }],\n        searchArea: [{ type: Input }],\n        modelIsValue: [{ type: Input }],\n        sortable: [{ type: Input }],\n        itemsDraggable: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        hintLabel: [{ type: Input }],\n        viewPortRowHeight: [{ type: Input }],\n        viewportMode: [{ type: Input }],\n        childrenField: [{ type: Input }],\n        textField: [{ type: Input }],\n        valueField: [{ type: Input }],\n        searchField: [{ type: Input }],\n        maxHeight: [{ type: Input }],\n        currentItem: [{ type: Input }],\n        multiSelect: [{ type: Input }],\n        selectedItems: [{ type: Input }],\n        selectedItem: [{ type: Input }],\n        selectedModel: [{ type: Input }],\n        selectedModels: [{ type: Input }],\n        itemListService: [{ type: Input }],\n        sortingService: [{ type: Input }],\n        groupingService: [{ type: Input }],\n        items: [{ type: Input }],\n        loadingItems: [{ type: Input }],\n        selectingItem: [{ type: Input }],\n        unselectingItem: [{ type: Input }],\n        expandingItem: [{ type: Input }],\n        collapsingItem: [{ type: Input }],\n        models: [{ type: Input }],\n        disabled: [{ type: Input }],\n        waiter: [{ type: Input }],\n        inputValidatorDirective: [{ type: ViewChild, args: [DejaChildValidatorDirective,] }]\n    };\n    return DejaTreeListComponent;\n}(ItemListBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n *  @license\n *  Copyright Hôpitaux Universitaires de Genève. All Rights Reserved.\n *\n *  Use of this source code is governed by an Apache-2.0 license that can be\n *  found in the LICENSE file at https://github.com/DSI-HUG/dejajs-components/blob/master/LICENSE\n */\nvar DejaTreeListScrollEvent = /** @class */ (function () {\n    function DejaTreeListScrollEvent() {\n    }\n    return DejaTreeListScrollEvent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DejaTreeListModule = /** @class */ (function () {\n    function DejaTreeListModule() {\n    }\n    DejaTreeListModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        DejaTreeListComponent,\n                    ],\n                    exports: [\n                        DejaTreeListComponent,\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        MatButtonModule,\n                        MatInputModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        DejaChildValidatorModule,\n                        DejaListLoaderModule,\n                        DejaDragDropModule,\n                        DejaTextMetricsModule,\n                        DejaItemModule,\n                    ],\n                },] }\n    ];\n    return DejaTreeListModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DejaTreeListModule, DejaTreeListScrollEvent, DejaTreeListComponent };\n\n//# sourceMappingURL=deja-js-component-tree-list.js.map"],"sourceRoot":""}